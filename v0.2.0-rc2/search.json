[{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/intro.html","id":"common-usage","dir":"Articles","previous_headings":"","what":"Common Usage","title":"Package Introduction","text":"minimal call robin_lm() robin_glm(), consisting formula, data arguments randomization scheme, produce object class treatment_effect.","code":"library(RobinCar2) #>  #> Attaching package: 'RobinCar2' #> The following object is masked from 'package:base': #>  #>     table head(glm_data) #>   id treatment s1 s2      covar           y y_b #> 1  1       pbo  b  c  0.5119022 -0.02761963   0 #> 2  2       pbo  a  c -0.7941720  0.49919508   0 #> 3  3      trt1  b  d  0.8988804  0.48037375   0 #> 4  4      trt2  b  c -0.4821317  0.67490126   1 #> 5  5      trt1  a  d -0.2285514  0.55499267   0 #> 6  6      trt2  a  c  0.2742069  2.39830584   1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/intro.html","id":"data-introduction","dir":"Articles","previous_headings":"Common Usage","what":"Data Introduction","title":"Package Introduction","text":"glm_data, following columns: id patient identifier. treatment treatment assignment. s1 first stratification factor. s2 second stratification factor. covar continuous covariate. y continuous outcome. y_b binary outcome.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/intro.html","id":"obtain-treatment-effect-for-continuous-outcomes-using-the-general-variance","dir":"Articles","previous_headings":"Common Usage","what":"Obtain Treatment Effect for Continuous Outcomes Using the General Variance","title":"Package Introduction","text":"continuous outcome y, linear model includes covar covariate, s1 stratification factor. randomization scheme permuted-block randomization stratified s1. model formula also includes treatment stratification interaction y ~ treatment * s1 + covar. can also use Huber-White variance estimator setting vcov = \"vcovHC\". Please note case, model formula contain treatment stratification (covariate) interaction. Note robin_glm can also handle continuous outcomes using default family default link function family = gaussian().","code":"robin_lm(y ~ treatment * s1 + covar,   data = glm_data,   treatment = treatment ~ pb(s1) ) #> Model        :  y ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.200321 0.067690 0.067651 0.3330 #> trt1 0.763971 0.075929 0.615152 0.9128 #> trt2 0.971250 0.076543 0.821228 1.1213 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.56365 0.10074  5.5952 2.203e-08 *** #> trt2 v.s. pbo   0.77093 0.10133  7.6082 2.779e-14 *** #> trt2 v.s. trt1  0.20728 0.10683  1.9402   0.05235 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 robin_lm(y ~ treatment + s1 + covar,   data = glm_data,   treatment = treatment ~ pb(s1),   vcov = \"vcovHC\" ) #> Model        :  y ~ treatment + s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.200449 0.067690 0.067779 0.3331 #> trt1 0.763978 0.075930 0.615158 0.9128 #> trt2 0.971285 0.076539 0.821271 1.1213 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.56353 0.10074  5.5941 2.218e-08 *** #> trt2 v.s. pbo   0.77084 0.10133  7.6074 2.796e-14 *** #> trt2 v.s. trt1  0.20731 0.10683  1.9405   0.05232 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/intro.html","id":"obtain-treatment-effect-for-binary-outcomes","dir":"Articles","previous_headings":"Common Usage","what":"Obtain Treatment Effect for Binary Outcomes","title":"Package Introduction","text":"binary outcomes, logistic model includes covar covariate, s1 stratification factor. randomization scheme permuted-block randomization stratified s1. model formula also includes treatment stratification interaction y_b ~ treatment * s1 + covar. Note need specify family binomial(link = \"logit\").","code":"robin_glm(y_b ~ treatment * s1 + covar,   data = glm_data,   treatment = treatment ~ pb(s1),   family = binomial(link = \"logit\") ) #> Model        :  y_b ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.356097 0.033599 0.290243 0.4219 #> trt1 0.580696 0.034418 0.513238 0.6482 #> trt2 0.621386 0.034019 0.554711 0.6881 #>  #> Contrast     :  difference #>                Estimate  Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo  0.224599 0.047711  4.7075 2.508e-06 *** #> trt2 v.s. pbo  0.265290 0.047534  5.5810 2.391e-08 *** #> trt2 v.s. trt1 0.040691 0.047941  0.8488     0.396     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/intro.html","id":"obtain-treatment-effect-for-counts","dir":"Articles","previous_headings":"Common Usage","what":"Obtain Treatment Effect for Counts","title":"Package Introduction","text":"counts, log link model includes covar covariate, s1 stratification factor. randomization scheme permuted-block randomization stratified s1. model formula also includes treatment stratification interaction y_count ~ treatment * s1 + covar. Note need specify family poisson(link = \"log\") use Poisson model MASS::negative.binomial(theta = NA) use negative binomial model. fixed theta provided known.","code":"glm_data$y_count <- rpois(nrow(glm_data), lambda = 20) robin_glm(   y_count ~ treatment * s1 + covar,   data = glm_data,   treatment = treatment ~ pb(s1),   family = MASS::negative.binomial(theta = 1) ) #> Model        :  y_count ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  19.15272  0.30047 18.56381 19.742 #> trt1 20.06258  0.33673 19.40260 20.723 #> trt2 20.59901  0.32085 19.97016 21.228 #>  #> Contrast     :  difference #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.90986 0.45255  2.0105 0.0443766 *   #> trt2 v.s. pbo   1.44629 0.43915  3.2934 0.0009898 *** #> trt2 v.s. trt1  0.53643 0.46552  1.1523 0.2491880     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/intro.html","id":"using-different-covariate-adaptive-randomization-schema","dir":"Articles","previous_headings":"Common Usage","what":"Using Different Covariate-Adaptive Randomization Schema","title":"Package Introduction","text":"randomization schema permuted-block randomization, can use randomization schema. Currently RobinCar2 supports sp simple randomization, pb permuted-block randomization, ps Pocock-Simon randomization.","code":"robin_glm(y_b ~ treatment * s1 + covar,   data = glm_data,   treatment = treatment ~ ps(s1),   family = binomial(link = \"logit\") ) #> Model        :  y_b ~ treatment * s1 + covar  #> Randomization:  treatment ~ ps(s1)  ( Pocock-Simon ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.356097 0.033599 0.290243 0.4219 #> trt1 0.580696 0.034418 0.513238 0.6482 #> trt2 0.621386 0.034019 0.554711 0.6881 #>  #> Contrast     :  difference #>                Estimate  Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo  0.224599 0.047711  4.7075 2.508e-06 *** #> trt2 v.s. pbo  0.265290 0.047534  5.5810 2.391e-08 *** #> trt2 v.s. trt1 0.040691 0.047941  0.8488     0.396     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/intro.html","id":"obtain-the-confidence-intervals-for-the-marginal-means-and-contrast","dir":"Articles","previous_headings":"Common Usage","what":"Obtain the Confidence Intervals for the Marginal Means and contrast","title":"Package Introduction","text":"obtain confidence interval, can use confint function. Given following model easy obtain confidence interval matrix marginal mean, specified level. parm provided, complete matrix (treatment groups) provided. Similarly contrast, however additional argument transform provide confidence interval transformed level. Thus, standard error removed make sense anymore. default, log_risk_ratio log_odds_ratio used contrast, confint transform back using exponential function. can also specify transform identity avoid transformation.","code":"robin_res <- robin_glm(y_b ~ treatment * s1 + covar,   data = glm_data,   treatment = treatment ~ ps(s1),   family = binomial(link = \"logit\"),   contrast = \"log_risk_ratio\" ) robin_res #> Model        :  y_b ~ treatment * s1 + covar  #> Randomization:  treatment ~ ps(s1)  ( Pocock-Simon ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.356097 0.033599 0.290243 0.4219 #> trt1 0.580696 0.034418 0.513238 0.6482 #> trt2 0.621386 0.034019 0.554711 0.6881 #>  #> Contrast     :  log_risk_ratio #>                Estimate  Std.Err Z Value Pr(>|z|)     #> trt1 v.s. pbo  0.489025 0.110617  4.4209 9.83e-06 *** #> trt2 v.s. pbo  0.556751 0.108532  5.1298 2.90e-07 *** #> trt2 v.s. trt1 0.067726 0.079934  0.8473   0.3968     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 confint(robin_res$marginal_mean, parm = 1:2, level = 0.7) #>       Estimate      15 %      85 % #> pbo  0.3560965 0.3212733 0.3909198 #> trt1 0.5806957 0.5450238 0.6163677 confint(robin_res$marginal_mean, level = 0.7) #>       Estimate      15 %      85 % #> pbo  0.3560965 0.3212733 0.3909198 #> trt1 0.5806957 0.5450238 0.6163677 #> trt2 0.6213865 0.5861284 0.6566445 confint(robin_res$contrast) #> The confidence interval is transformed. #>                Estimate     2.5 %   97.5 % #> trt1 v.s. pbo  1.630726 1.3128756 2.025528 #> trt2 v.s. pbo  1.744994 1.4106235 2.158624 #> trt2 v.s. trt1 1.070072 0.9148996 1.251563 confint(robin_res$contrast, transform = identity) #>                  Estimate      2.5 %    97.5 % #> trt1 v.s. pbo  0.48902507  0.2722198 0.7058303 #> trt2 v.s. pbo  0.55675135  0.3440318 0.7694709 #> trt2 v.s. trt1 0.06772628 -0.0889410 0.2243936"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-comparison.html","id":"robincar2-and-robincar-produce-the-same-results-when-run-with-the-same-settings-on-the-same-data-for-glm","dir":"Articles","previous_headings":"","what":"RobinCar2 and RobinCar produce the same results when run with the same settings on the same data for GLM","title":"Generalized Linear Regression in RobinCar and RobinCar2","text":"RobinCar2 testing suite ensures outputs identical RobinCar RobinCar2. comparisons use glm_data dataset included RobinCar2. outputs point estimates variance estimates compared variety settings, including: Marginal means treatment contrasts, difference, relative risk, odds ratio, custom contrast. Gaussian, binomial, Poisson, negative binomial (known unknown dispersion parameters) working models. Mean model specifications ANOVA, ANCOVA, ANHECOVA three covariates. simple, Pocock-Simon, permuted block randomization schemes. Please see following testing file details: https://github.com/openpharma/RobinCar2/blob/main/tests/testthat/test-validate-robin_glm.R view report RobinCar2 Validation Report.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-comparison.html","id":"differences-between-robincar-and-robincar2-argument-usage-for-glm","dir":"Articles","previous_headings":"","what":"Differences between RobinCar and RobinCar2 argument usage for GLM","title":"Generalized Linear Regression in RobinCar and RobinCar2","text":"interface users similar RobinCar RobinCar2, though RobinCar2 streamlined use. Users RobinCar find RobinCar2 least user-friendly trouble switching packages. provide example using logistic regression working model stratified permuted block randomization, glm_data provided package. output treatment contrast.","code":"head(glm_data)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-comparison.html","id":"robincar","dir":"Articles","previous_headings":"Differences between RobinCar and RobinCar2 argument usage for GLM","what":"RobinCar","title":"Generalized Linear Regression in RobinCar and RobinCar2","text":"call RobinCar, output:","code":"robincar_glm(   df = glm_data,   treat_col = \"treatment\",   response_col = \"y_b\",   formula = y_b ~ treatment * s1 + covar,   car_strata_cols = \"s1\",   car_scheme = \"permuted-block\",   g_family = binomial(link = \"logit\"),   contrast_h = \"diff\" ) #> $main #> Treatment group mean estimates from a GLM working model of family binomial and link logit using formula:  #> response ~ treat * s1 + covar #>  #>  #> Used HC0-type of heteroskedasticity-consistent variance estimates  #> and adjusted variance-covariance matrix for randomization car_strata s1  #> consistent with the permuted-block design. #>  #> Estimates: #> # A tibble: 3 × 4 #>   treat estimate     se `pval (2-sided)` #>   <chr>    <dbl>  <dbl>            <dbl> #> 1 pbo      0.356 0.0336         3.03e-26 #> 2 trt1     0.581 0.0344         7.25e-64 #> 3 trt2     0.621 0.0340         1.54e-74 #>  #> Variance-Covariance Matrix: #>              [,1]         [,2]         [,3] #> pbo  1.128902e-03 1.856234e-05 1.333885e-05 #> trt1 1.856234e-05 1.184599e-03 2.178112e-05 #> trt2 1.333885e-05 2.178112e-05 1.157268e-03 #>  #> $contrast #> Treatment group contrasts using linear contrast #>  #> Contrasts: #> # A tibble: 2 × 4 #>   contrast         estimate     se `pval (2-sided)` #>   <chr>               <dbl>  <dbl>            <dbl> #> 1 treat trt1 - pbo    0.225 0.0477     0.00000251   #> 2 treat trt2 - pbo    0.265 0.0475     0.0000000239 #>  #> Variance-Covariance Matrix for Contrasts: #>             [,1]        [,2] #> [1,] 0.002276376 0.001118782 #> [2,] 0.001118782 0.002259492"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-comparison.html","id":"robincar2","dir":"Articles","previous_headings":"Differences between RobinCar and RobinCar2 argument usage for GLM","what":"RobinCar2","title":"Generalized Linear Regression in RobinCar and RobinCar2","text":"RobinCar2, randomization information, including name treatment variable, stratification variable, randomization scheme info included treatment argument. contrasts RobinCar, information required treat_col, car_strata_cols, car_scheme. structure output RobinCar2 closely mirrors structure output one obtain using glm().","code":"robin_glm(   data = glm_data,   formula = y_b ~ treatment * s1 + covar,   treatment = treatment ~ pb(s1),   family = binomial(link = \"logit\") ) #> Model        :  y_b ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.356097 0.033599 0.290243 0.4219 #> trt1 0.580696 0.034418 0.513238 0.6482 #> trt2 0.621386 0.034019 0.554711 0.6881 #>  #> Contrast     :  difference #>                Estimate  Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo  0.224599 0.047711  4.7075 2.508e-06 *** #> trt2 v.s. pbo  0.265290 0.047534  5.5810 2.391e-08 *** #> trt2 v.s. trt1 0.040691 0.047941  0.8488     0.396     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-comparison.html","id":"feature-availability-in-robincar-v--robincar2","dir":"Articles","previous_headings":"","what":"Feature availability in RobinCar v. RobinCar2","title":"Generalized Linear Regression in RobinCar and RobinCar2","text":"list major differences features available RobinCar RobinCar2. continually updated packages updated. Last Updated: February 21, 2025","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-comparison.html","id":"variance-function","dir":"Articles","previous_headings":"Feature availability in RobinCar v. RobinCar2 > Features available in RobinCar2 that are not available in RobinCar","what":"Variance function","title":"Generalized Linear Regression in RobinCar and RobinCar2","text":"RobinCar one option variance, RobinCar2 calls vcovG. vcovG influence function-based variance estimator. RobinCar2 option specifying vcov vcovG. Currently, vcov allowed RobinCar2 sandwich variance, called vcovHC valid ANCOVA linear contrast. Please see table following blogpost ASA-BIOP Covariate Adjustment SWG information methodology behind sandwich variance versus influence-based variance.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-comparison.html","id":"features-available-in-robincar-that-are-not-available-in-robincar2","dir":"Articles","previous_headings":"Feature availability in RobinCar v. RobinCar2","what":"Features available in RobinCar that are not available in RobinCar2","title":"Generalized Linear Regression in RobinCar and RobinCar2","text":"RobinCar supports many methods like machine-learning methods. methods included RobinCar2.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-survival.html","id":"overview-of-survival-analysis-methods","dir":"Articles","previous_headings":"","what":"Overview of Survival Analysis Methods","title":"Survival Analysis with RobinCar2","text":"Survival analysis performed robin_surv function, syntax : covariates strata, can just replaced intercept (1) term, respectively. Depending choice strata covariates, following four methods available: Standard log-rank test without strata covariates omitting strata covariates Stratified log-rank test specifying strata covariates Covariate adjusted log-rank test specifying covariates strata Covariate adjusted stratified log-rank test specifying strata covariates Let’s go simple example. start standard log-rank test: can perform stratified log-rank test adding strata right-hand side treatment formula: also just use covariate adjustment: combine stratification covariate adjustment:","code":"robin_surv(   Surv(time, event) ~ covariates,   treatment = group ~ strata,   data = df ) library(RobinCar2) robin_surv(   Surv(time, status) ~ 1,   treatment = sex ~ 1,   data = surv_data ) #> Model        :  Surv(time, status) ~ 1  #> Randomization:  sex ~ 1  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)    #> Male v.s. Female  0.53343 0.16727   3.189 0.001428 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     3.2135 0.001311 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 robin_surv(   Surv(time, status) ~ 1,   treatment = sex ~ strata,   data = surv_data ) #> Model        :  Surv(time, status) ~ 1  #> Randomization:  sex ~ strata  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)    #> Male v.s. Female  0.55482 0.17063  3.2516 0.001147 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     3.2856 0.001018 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 robin_surv(   Surv(time, status) ~ age + meal.cal,   treatment = sex ~ 1,   data = surv_data ) #> Model        :  Surv(time, status) ~ age + meal.cal  #> Randomization:  sex ~ 1  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)   #> Male v.s. Female  0.47686 0.18608  2.5626  0.01039 * #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     2.6858 0.007236 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 robin_surv(   Surv(time, status) ~ age + meal.cal,   treatment = sex ~ strata,   data = surv_data ) #> Model        :  Surv(time, status) ~ age + meal.cal  #> Randomization:  sex ~ strata  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)    #> Male v.s. Female  0.55219 0.19133  2.8861   0.0039 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     2.9496 0.003181 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-survival.html","id":"details-of-the-methods","dir":"Articles","previous_headings":"","what":"Details of the Methods","title":"Survival Analysis with RobinCar2","text":"four methods introduced implemented based corresponding score functions U(θ)U(\\theta) corresponding variance estimators σ2(θ)\\sigma^{2}(\\theta), θ\\theta log hazard ratio. log-rank test statistic defined 𝒯L=nUL(0)/σL(0) \\mathcal{T}_{L} = \\sqrt{n} U_{L}(0) / \\sigma_{L}(0) asymptotically follows standard normal distribution null hypothesis treatment effect, .e. θ=0\\theta = 0. estimation θ\\theta, find root θ̂\\hat{\\theta} score function U(θ)U(\\theta) U(θ̂)=0U(\\hat{\\theta}) = 0. standard error θ̂\\hat{\\theta} derived variance estimator σ(θ̂)\\sigma(\\hat{\\theta}), specific formulas depending method used detailed .","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-survival.html","id":"standard-analysis-without-strata-or-covariates","dir":"Articles","previous_headings":"Details of the Methods","what":"Standard analysis without strata or covariates","title":"Survival Analysis with RobinCar2","text":"Following Section 2 Ye, Shao, Yi (2023), score function partial likelihood Cox proportional hazards model λ1(t)=λ0(t)exp⁡(θ)\\lambda_{1}(t) = \\lambda_{0}(t) \\exp(\\theta) given : UL(θ)=1n∑=1n∫0τ{Ii−exp⁡(θ)Y¯1(t)Y¯0(t)+exp⁡(θ)Y¯1(t)}dNi(t)=1n∑j=1mIj−exp⁡(θ)Y¯1(tj)Y¯0(tj)+exp⁡(θ)Y¯1(tj) \\begin{align*} U_{L}(\\theta)  &=  \\frac{1}{n} \\sum_{=1}^{n} \\int_{0}^{\\tau}  \\left\\{ I_{} - \\frac{\\exp(\\theta) \\overline{Y}_{1}(t)}{\\overline{Y}_{0}(t) + \\exp(\\theta) \\overline{Y}_{1}(t)} \\right\\} dN_i(t)\\\\ &= \\frac{1}{n} \\sum_{j=1}^{m} I_{j} - \\frac{\\exp(\\theta) \\overline{Y}_{1}(t_{j})}{\\overline{Y}_{0}(t_{j}) + \\exp(\\theta) \\overline{Y}_{1}(t_{j})} \\end{align*} switched summation patients =1,…,ni = 1, \\dotsc, n summation patients events j=1,…,mj = 1, \\dotsc, m m≤nm \\leq n. treatment indicator Ij=1I_{j} = 1 patient jj treatment group 1, Ij=0I_{j} = 0 patient jj treatment group 0. proportions patients risk time tjt_{j}, per arm k=0,1k = 0, 1 given Y¯k(tj)=1n∑=1n𝕀(Ii=k)𝕀(ti≥tj) \\overline{Y}_{k}(t_{j}) = \\frac{1}{n} \\sum_{=1}^{n} \\mathbb{}(I_{} = k) \\mathbb{}(t_{} \\geq t_{j}) tit_{} potentially right-censored time patient ii 𝕀(⋅)\\mathbb{}(\\cdot) indicator function. corresponding variance estimate given adapted version using correction factor cθ(t)c_{\\theta}(t) accounts ties survival times log-rank test. σL2(θ)=1n∑=1n∫0τexp⁡(θ)Y¯0(t)Y¯1(t)cθ(t)Y¯θ(t)2dNi(t)=1n∑j=1mexp⁡(θ)Y¯0(tj)Y¯1(tj)cθ(tj)Y¯θ(tj)2 \\begin{align*} \\sigma_{L}^{2}(\\theta) &= \\frac{1}{n} \\sum_{=1}^{n} \\int_{0}^{\\tau} \\frac{\\exp(\\theta) \\overline{Y}_{0}(t) \\overline{Y}_{1}(t) c_{\\theta}(t)}{\\overline{Y}_{\\theta}(t)^{2}} dN_i(t) \\\\ &=  \\frac{1}{n} \\sum_{j=1}^{m} \\frac{\\exp(\\theta) \\overline{Y}_{0}(t_{j}) \\overline{Y}_{1}(t_{j}) c_{\\theta}(t_{j})}{\\overline{Y}_{\\theta}(t_{j})^{2}} \\end{align*} abbreviated Y¯θ(t)=Y¯0(t)+exp⁡(θ)Y¯1(t) \\overline{Y}_{\\theta}(t) = \\overline{Y}_{0}(t) + \\exp(\\theta) \\overline{Y}_{1}(t) similarly Y¯θ(tj)=Y¯0(tj)+exp⁡(θ)Y¯1(tj). \\overline{Y}_{\\theta}(t_{j}) = \\overline{Y}_{0}(t_{j}) + \\exp(\\theta) \\overline{Y}_{1}(t_{j}). Let δi\\delta_{} binary event indicator patient ii, let number events time tjt_{j} denoted m(tj)=∑=1nδi𝕀(ti=tj)m(t_{j}) = \\sum_{=1}^{n} \\delta_{} \\mathbb{}(t_{} = t_{j}). define correction factor cθ(tj)c_{\\theta}(t_{j}) follows: cθ(tj)={1if m(tj)=1nY¯θ(tj)−m(tj)nY¯θ(tj)−1if m(tj)>1 c_{\\theta}(t_{j}) =  \\begin{cases} 1 & \\text{} m(t_{j}) = 1 \\\\ \\frac{n \\overline{Y}_{\\theta}(t_{j}) - m(t_{j})}{n \\overline{Y}_{\\theta}(t_{j}) - 1} & \\text{} m(t_{j}) > 1 \\end{cases} Furthermore, note correction factor used calculating log-rank test statistic, given θ=0\\theta = 0 𝒯L=nUL(0)/σL(0). \\mathcal{T}_{L} = \\sqrt{n} U_{L}(0) / \\sigma_{L}(0). However, estimate log hazard ratio θ\\theta finding root θ̂L\\hat{\\theta}_{L} score function UL(θ̂L)=0U_{L}(\\hat{\\theta}_{L}) = 0, set cθ(tj)≡1c_{\\theta}(t_{j}) \\equiv 1. standard error θ̂L\\hat{\\theta}_{L} given 1nσL(θ̂L). \\frac{1}{\\sqrt{n} \\sigma_{L}(\\hat{\\theta}_{L})}. score function variance estimator implemented internal function RobinCar2:::h_lr_score_no_strata_no_cov().","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-survival.html","id":"stratified-analysis-without-covariates","dir":"Articles","previous_headings":"Details of the Methods","what":"Stratified analysis without covariates","title":"Survival Analysis with RobinCar2","text":"Following Section S2.3 Ye, Shao, Yi (2023), score function stratified log-rank test given : USL(θ)=1n∑z∑:Zi=z∫0τ{Ii−exp⁡(θ)Y¯z1(t)Y¯z0(t)+exp⁡(θ)Y¯z1(t)}dNi(t)=1n∑z∑j(z)Ij−exp⁡(θ)Y¯z1(tj)Y¯z0(tj)+exp⁡(θ)Y¯z1(tj) \\begin{align*} U_{SL}(\\theta)  &=  \\frac{1}{n} \\sum_{z} \\sum_{: Z_{} = z} \\int_{0}^{\\tau}  \\left\\{ I_{} - \\frac{\\exp(\\theta) \\overline{Y}_{z1}(t)}{\\overline{Y}_{z0}(t) + \\exp(\\theta) \\overline{Y}_{z1}(t)} \\right\\} dN_i(t)\\\\ &= \\frac{1}{n} \\sum_{z} \\sum_{j(z)} I_{j} - \\frac{\\exp(\\theta) \\overline{Y}_{z1}(t_{j})}{\\overline{Y}_{z0}(t_{j}) + \\exp(\\theta) \\overline{Y}_{z1}(t_{j})} \\end{align*} last sum unique event times jj stratum zz, therefore written simply indices j(z)j(z). proportions patients risk time tjt_{j}, per arm k=0,1k = 0, 1 stratum zz denoted Y¯zk(tj)\\overline{Y}_{zk}(t_{j}). Importantly, proportion regards total number patients across strata, just within stratum zz. can see score function sum strata zz standard log-rank score function. way, variance estimator σSL2(θ)\\sigma_{SL}^{2}(\\theta) sum strata zz standard log-rank variance estimator σL2(θ)\\sigma_{L}^{2}(\\theta). standard error correspondingly estimated log hazard ratio θ̂SL\\hat{\\theta}_{SL} given 1nσSL(θ̂SL). \\frac{1}{\\sqrt{n} \\sigma_{SL}(\\hat{\\theta}_{SL})}. One small important detail number patients nn denominator always total number patients across strata, number patients stratum zz. reason standard log-rank score function RobinCar2:::h_lr_score_no_strata_no_cov() argument n, used stratified log-rank score function RobinCar2:::h_lr_score_strat() pass total number patients.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-survival.html","id":"covariate-adjusted-analysis-without-strata","dir":"Articles","previous_headings":"Details of the Methods","what":"Covariate adjusted analysis without strata","title":"Survival Analysis with RobinCar2","text":"little bit complex calculation score function covariate adjusted log-rank test, following Section 3 Ye, Shao, Yi (2023) given : UCL(θ)=UL(θ)−1n∑=1n{Ii(Xi−X¯)⊤β̂1(θL)−(1−Ii)(Xi−X¯)⊤β̂0(θL)}. U_{CL}(\\theta) = U_{L}(\\theta) - \\frac{1}{n} \\sum_{=1}^{n}  \\{ I_{}(X_{} - \\overline{X})^{\\top} \\hat{\\beta}_{1}(\\theta_{L}) -  (1 - I_{})(X_{} - \\overline{X})^{\\top} \\hat{\\beta}_{0}(\\theta_{L})  \\}. explain lot notation. score function UCL(θ)U_{CL}(\\theta) based standard log-rank score function UL(θ)U_{L}(\\theta), subtract correction term accounts covariates XiX_{} patient ii. covariates assumed centered, .e. X¯=1n∑=1nXi\\overline{X} = \\frac{1}{n} \\sum_{=1}^{n} X_{} mean covariates across patients. Interestingly right hand side see also θL\\theta_{L}. supposed log hazard ratio estimated standard log-rank analysis, .e. θ̂L\\hat{\\theta}_{L}, finding root UCL(θ)U_{CL}(\\theta) estimate log hazard ratio θ̂CL\\hat{\\theta}_{CL}. reason asymptotic guaranteed efficiency gain covariate adjusted log hazard ratio estimator proven using version score function, see Section 3 Ye, Shao, Yi (2023). hand, calculating covariate adjusted log-rank score test statistic, set θ=0\\theta = 0 θL=0\\theta_{L} = 0. regression coefficients β̂1\\hat{\\beta}_{1} β̂0\\hat{\\beta}_{0} correction term estimated given log hazard ratio θ\\theta? First, -called derived outcomes OikO_{ik} patients ii arms k=0,1k=0,1 need calculated. Let Yik(t)Y_{ik}(t) indicator whether patient ii treatment arm k=0,1k = 0,1 risk time tt, let δi\\delta_{} binary event indicator patient ii. derived outcomes defined : Oik(θ)=∫0τ{exp⁡(θ)Y¯1(t)}(1−k){Y¯0(t)}kY¯θ(t){dNik(t)−Yik(t)exp⁡(θ)dN¯(t)Y¯θ(t)}=∑j=1m{exp⁡(θ)Y¯1(tj)}(1−k){Y¯0(tj)}kY¯θ(tj){δi𝕀(tj=ti)−Yik(tj)exp⁡(θ)m(tj)/nY¯θ(tj)} \\begin{align*} O_{ik}(\\theta)  &= \\int_{0}^{\\tau}  \\frac{   \\{\\exp(\\theta) \\overline{Y}_{1}(t)\\}^{(1-k)}   \\{\\overline{Y}_{0}(t)\\}^{k} }{\\overline{Y}_{\\theta}(t)}  \\left\\{    dN_{ik}(t) -  \\frac{Y_{ik}(t) \\exp(\\theta) d\\overline{N}(t)} {\\overline{Y}_{\\theta}(t)}  \\right\\} \\\\ &=  \\sum_{j=1}^{m} \\frac{   \\{\\exp(\\theta) \\overline{Y}_{1}(t_{j})\\}^{(1-k)}   \\{\\overline{Y}_{0}(t_{j})\\}^{k} }{\\overline{Y}_{\\theta}(t_{j})}  \\left\\{    \\delta_{} \\mathbb{}(t_{j} = t_{}) -  \\frac{Y_{ik}(t_{j}) \\exp(\\theta) m(t_{j}) / n} {\\overline{Y}_{\\theta}(t_{j})}  \\right\\} \\end{align*} can see count measure integral replaced sum unique event times tj,j=1,…,mt_{j}, j = 1, \\dotsc, m. Second, given derived outcomes Oik(θ)O_{ik}(\\theta), coefficients estimate β̂k(θ)\\hat{\\beta}_{k}(\\theta) treatment arm k=0,1k = 0, 1 defined solution least squares problem centered covariates Xi−X¯kX_{} - \\overline{X}_{k} (therefore constant intercept column XiX_{}) responses Oik(θ)O_{ik}(\\theta). Finally, can define variance estimator follows: σCL2(θ)=σL2(θ)−π̂(1−π̂)(β̂0(θL)+β̂1(θL))⊤Σ̂X(β̂0(θL)+β̂1(θL)) \\sigma_{CL}^{2}(\\theta) = \\sigma_{L}^{2}(\\theta) -    \\hat{\\pi}(1 - \\hat{\\pi})    (\\hat{\\beta}_{0}(\\theta_{L}) + \\hat{\\beta}_{1}(\\theta_{L}))^{\\top}   \\hat{\\Sigma}_{X}   (\\hat{\\beta}_{0}(\\theta_{L}) + \\hat{\\beta}_{1}(\\theta_{L})) π̂=1n∑=1nIi\\hat{\\pi} = \\frac{1}{n} \\sum_{=1}^{n} I_{} proportion patients treatment arm 1, Σ̂X\\hat{\\Sigma}_{X} sample covariance matrix centered covariates Xi−X¯X_{} - \\overline{X} (average now taken across patients, just within treatment arm kk). Similarly score function defined , right hand side variance estimator evaluated θ=0\\theta = 0 θL=0\\theta_{L} = 0 calculating covariate adjusted log-rank test statistic. However, estimating covariate adjusted log hazard ratio θ̂CL\\hat{\\theta}_{CL}, regression coefficients β̂0(θ̂L)\\hat{\\beta}_{0}(\\hat{\\theta}_{L}) β̂1(θ̂L)\\hat{\\beta}_{1}(\\hat{\\theta}_{L}) fixed unadjusted log hazard ratio θ̂L\\hat{\\theta}_{L} expression standard error θ̂CL\\hat{\\theta}_{CL}: σL2(θ̂CL)−π̂(1−π̂)(β̂0(θ̂L)+β̂1(θ̂L))⊤Σ̂X(β̂0(θ̂L)+β̂1(θ̂L))nσL2(θ̂CL) \\frac{\\sqrt{   \\sigma_{L}^{2}(\\hat{\\theta}_{CL}) -    \\hat{\\pi}(1 - \\hat{\\pi})    (\\hat{\\beta}_{0}(\\hat{\\theta}_{L}) + \\hat{\\beta}_{1}(\\hat{\\theta}_{L}))^{\\top}   \\hat{\\Sigma}_{X}   (\\hat{\\beta}_{0}(\\hat{\\theta}_{L}) + \\hat{\\beta}_{1}(\\hat{\\theta}_{L})) }}{   \\sqrt{n} \\sigma_{L}^{2}(\\hat{\\theta}_{CL})  } published version variance estimator used estimating standard error θ̂CL\\hat{\\theta}_{CL} via σL2(θ̂CL)\\sigma_{L}^{2}(\\hat{\\theta}_{CL}), default RobinCar2. However, also alternative version call “unadjusted” σL2(θ̂CL)\\sigma_{L}^{2}(\\hat{\\theta}_{CL}) right hand side definition replaced σL2(θ̂L)\\sigma_{L}^{2}(\\hat{\\theta}_{L}). , log-rank score variance estimator evaluated unadjusted log hazard ratio estimate θ̂L\\hat{\\theta}_{L}, rather covariate adjusted log hazard ratio estimate θ̂CL\\hat{\\theta}_{CL}. version available via option hr_se_plugin_adjusted = FALSE, version implemented RobinCar package. Note results differ slightly. resulting standard errors consistent valid. One motivation unadjusted version guaranteed smaller standard error unadjusted log hazard ratio, due fact correction term always positive. score function variance estimator implemented internal function RobinCar2:::h_lr_score_cov().","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-survival.html","id":"covariate-adjusted-and-stratified-analysis","dir":"Articles","previous_headings":"Details of the Methods","what":"Covariate adjusted and stratified analysis","title":"Survival Analysis with RobinCar2","text":"Finally, using covariate adjustment stratification, following Section S2.3 Ye, Shao, Yi (2023), score function given : UCSL(θ)=USL(θ)−1n∑z∑:Zi=z{Ii(Xi−X¯z)⊤β̂1(θSL)−(1−Ii)(Xi−X¯z)⊤β̂0(θSL)}, U_{CSL}(\\theta) = U_{SL}(\\theta) - \\frac{1}{n} \\sum_{z} \\sum_{: Z_{} = z} \\{ I_{}(X_{} - \\overline{X}_{z})^{\\top} \\hat{\\beta}_{1}(\\theta_{SL}) -  (1 - I_{})(X_{} - \\overline{X}_{z})^{\\top} \\hat{\\beta}_{0}(\\theta_{SL})  \\}, shows us based score function USL(θ)U_{SL}(\\theta) stratified covariate-adjusted log-rank test. correction term added strata zz, based overall regression coefficients β̂0(θSL)\\hat{\\beta}_{0}(\\theta_{SL}) β̂1(θSL)\\hat{\\beta}_{1}(\\theta_{SL}). Similarly unstratified covariate adjusted log-rank test, derived outcomes Ozik(θ)O_{zik}(\\theta) stratum zz defined : Ozik(θ)=∫0τ{exp⁡(θ)Y¯z1(t)}(1−k){Y¯z0(t)}kY¯zθ(t){dNik(t)−Yik(t)exp⁡(θ)dN¯z(t)Y¯zθ(t)}=∑j(z){exp⁡(θ)Y¯z1(tj)}(1−k){Y¯z0(tj)}kY¯zθ(tj){δi𝕀(tj=ti)−Yik(tj)exp⁡(θ)mz(tj)/nY¯zθ(tj)} \\begin{align*} O_{zik}(\\theta)  &= \\int_{0}^{\\tau}  \\frac{   \\{\\exp(\\theta) \\overline{Y}_{z1}(t)\\}^{(1-k)}   \\{\\overline{Y}_{z0}(t)\\}^{k} }{\\overline{Y}_{z\\theta}(t)}  \\left\\{    dN_{ik}(t) -  \\frac{Y_{ik}(t) \\exp(\\theta) d\\overline{N}_{z}(t)} {\\overline{Y}_{z\\theta}(t)}  \\right\\} \\\\ &=  \\sum_{j(z)} \\frac{   \\{\\exp(\\theta) \\overline{Y}_{z1}(t_{j})\\}^{(1-k)}   \\{\\overline{Y}_{z0}(t_{j})\\}^{k} }{\\overline{Y}_{z\\theta}(t_{j})}  \\left\\{    \\delta_{} \\mathbb{}(t_{j} = t_{}) -  \\frac{Y_{ik}(t_{j}) \\exp(\\theta) m_{z}(t_{j}) / n} {\\overline{Y}_{z\\theta}(t_{j})}  \\right\\} \\end{align*} mz(tj)=∑:Zi=zδi𝕀(tj=ti)m_{z}(t_{j}) = \\sum_{: Z_{} = z} \\delta_{} \\mathbb{}(t_{j} = t_{}) number events stratum zz unique event time tjt_{j}, abbreviated Yzθ(t)=Y¯z0(t)+exp⁡(θ)Y¯z1(t). Y_{z\\theta}(t) = \\overline{Y}_{z0}(t) + \\exp(\\theta) \\overline{Y}_{z1}(t). Now second step, given derived outcomes Ozik(θ)O_{zik}(\\theta), coefficients estimate β̂k(θ)\\hat{\\beta}_{k}(\\theta) treatment arm k=0,1k = 0, 1 defined : β̂k(θ)={∑z∑:Ii=k,Zi=z(Xi−X¯zk)(Xi−X¯zk)⊤}−1∑z∑:Ii=k,Zi=z(Xi−X¯zk)Ozik(θ). \\hat{\\beta}_{k}(\\theta) =  \\left\\{   \\sum_{z} \\sum_{: I_{} = k, Z_{} = z}   (X_{} - \\overline{X}_{zk})   (X_{} - \\overline{X}_{zk})^{\\top} \\right\\}^{-1} \\sum_{z} \\sum_{: I_{} = k, Z_{} = z}   (X_{} - \\overline{X}_{zk})   O_{zik}(\\theta). see within treatment group within stratum, covariates centered separately, required cross-products added strata. Finally coefficient estimates obtained solving least squares problem derived outcomes Ozik(θ)O_{zik}(\\theta) responses. Finally, variance estimator defined similarly covariate adjusted unstratified log-rank test: σCSL2(θ)=σSL2(θ)−π̂(1−π̂)(β̂0(θSL)+β̂1(θSL))⊤{∑znz/nΣ̂X|z}(β̂0(θSL)+β̂1(θSL)) \\sigma_{CSL}^{2}(\\theta) = \\sigma_{SL}^{2}(\\theta) -    \\hat{\\pi}(1 - \\hat{\\pi})    (\\hat{\\beta}_{0}(\\theta_{SL}) + \\hat{\\beta}_{1}(\\theta_{SL}))^{\\top}   \\left\\{\\sum_{z} n_z / n \\hat{\\Sigma}_{X\\vert z}\\right\\}   (\\hat{\\beta}_{0}(\\theta_{SL}) + \\hat{\\beta}_{1}(\\theta_{SL})) nzn_z number patients stratum zz Σ̂X|z\\hat{\\Sigma}_{X\\vert z} sample covariance matrix original covariates XiX_{} within stratum zz. way unstratified case, estimating covariate adjusted stratified log hazard ratio θ̂CSL\\hat{\\theta}_{CSL}, regression coefficients β̂0(θ̂SL)\\hat{\\beta}_{0}(\\hat{\\theta}_{SL}) β̂1(θ̂SL)\\hat{\\beta}_{1}(\\hat{\\theta}_{SL}) fixed unadjusted log hazard ratio θ̂SL\\hat{\\theta}_{SL} expression standard error θ̂CSL\\hat{\\theta}_{CSL}: σSL2(θ̂CSL)−π̂(1−π̂)(β̂0(θ̂SL)+β̂1(θ̂SL))⊤{∑znz/nΣ̂X|z}(β̂0(θ̂SL)+β̂1(θ̂SL))nσSL2(θ̂CSL) \\frac{\\sqrt{   \\sigma_{SL}^{2}(\\hat{\\theta}_{CSL}) -    \\hat{\\pi}(1 - \\hat{\\pi})    (\\hat{\\beta}_{0}(\\hat{\\theta}_{SL}) + \\hat{\\beta}_{1}(\\hat{\\theta}_{SL}))^{\\top}   \\{\\sum_{z} n_z / n \\hat{\\Sigma}_{X\\vert z}\\}   (\\hat{\\beta}_{0}(\\hat{\\theta}_{SL}) + \\hat{\\beta}_{1}(\\hat{\\theta}_{SL})) }}{   \\sqrt{n} \\sigma_{SL}^{2}(\\hat{\\theta}_{CSL})  } published version variance estimator used estimating standard error θ̂CSL\\hat{\\theta}_{CSL} via σSL2(θ̂CSL)\\sigma_{SL}^{2}(\\hat{\\theta}_{CSL}), default RobinCar2. However, also alternative version call “unadjusted” σSL2(θ̂CSL)\\sigma_{SL}^{2}(\\hat{\\theta}_{CSL}) right hand side definition replaced σSL2(θ̂SL)\\sigma_{SL}^{2}(\\hat{\\theta}_{SL}). , log-rank score variance estimator evaluated unadjusted log hazard ratio estimate θ̂SL\\hat{\\theta}_{SL}, rather covariate adjusted log hazard ratio estimate θ̂CSL\\hat{\\theta}_{CSL}. version available via option hr_se_plugin_adjusted = FALSE, version implemented RobinCar package. Note results differ slightly. resulting standard errors consistent valid. One motivation unadjusted version guaranteed smaller standard error unadjusted log hazard ratio, due fact correction term always positive. score function variance estimator implemented internal function RobinCar2:::h_lr_score_strat_cov().","code":""},{"path":[]},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-validate.html","id":"negative-binomial-working-model","dir":"Articles","previous_headings":"Compare RobinCar2 to RobinCar results","what":"Negative Binomial Working Model","title":"RobinCar2 Validation Report","text":"response following negative binomial distribution dispersion parameter 1. checks marginal means variance.","code":"# Make categorical outcome to test counts # Not informative at all glm_data$y_c <- MASS::rnegbin(n = nrow(glm_data), theta = 1)  test_that(\"marginal means\", {   # Function to compare RobinCar to RobinCar2 outputs   compare_means <- function(r1, r2) {     # Estimates and variance from RobinCar     enames <- r1$result$treat     estimates1 <- r1$result$estimate     names(estimates1) <- enames     variances1 <- r1$varcov     colnames(variances1) <- enames     rownames(variances1) <- enames      # Estimates and variance for the first two     # contrast vector elements from RobinCar2     mm <- r2$marginal_mean     estimates2 <- mm$estimate     variances2 <- mm$variance      testthat::expect_equal(estimates1, estimates2)     testthat::expect_equal(variances1, variances2)   }    families <- list(     gaussian(),     binomial(),     poisson(),     negative.binomial(theta = 1),     \"nb\"   ) # negative binomial with unspecified dispersion parameter    for (family in families) {     for (model in c(       # ANOVA       \"~ treatment\",       # ANCOVA       \"~ treatment + covar\",       \"~ treatment + covar + s1\",       \"~ treatment + covar + s1 + s2\",       # ANHECOVA       \"~ treatment * (covar)\",       \"~ treatment * (covar + s1)\",       \"~ treatment * (covar + s1 + s2)\"     )) {       for (scheme in c(\"simple\", \"pocock-simon\", \"permuted-block\")) {         for (strata in list(c(), c(\"s1\"), c(\"s1\", \"s2\"))) {           # Set formula based on parameters           if (identical(family, \"nb\")) {             yname <- \"y_c\"           } else if (identical(family$family, \"gaussian\")) {             yname <- \"y\"           } else if (identical(family$family, \"binomial\")) {             yname <- \"y_b\"           } else {             yname <- \"y_c\"           }            form <- as.formula(paste0(yname, model))            if (identical(family, \"nb\")) {             family2 <- MASS::negative.binomial(theta = NA)           } else {             family2 <- family           }            if (scheme == \"simple\") {             scheme2 <- \"sp\"           } else if (scheme == \"permuted-block\") {             scheme2 <- \"pb\"           } else {             scheme2 <- \"ps\"           }            if (identical(strata, c())) {             strata2 <- \"1\"           } else {             strata2 <- strata           }            strata2c <- paste(strata2, collapse = \" + \")           scheme_form <- paste0(\"treatment ~ \", scheme2, \"(\", strata2c, \")\")            # Skip simple randomization with strata           # this is fine for RobinCar2, but it returns an error           # (intentionally) with RobinCar           if (!(identical(strata, c()) & (scheme != \"simple\"))) {             # Use RobinCar             # We don't need to see RobinCar warnings.             set.seed(365)             suppressWarnings(               robincar1 <- robincar_glm(                 df = glm_data,                 treat_col = \"treatment\",                 response_col = yname,                 formula = form,                 car_scheme = scheme,                 car_strata_cols = strata,                 g_family = family               )             )              # Use RobinCar2             set.seed(365)             robincar2 <- robin_glm(               form = form,               data = glm_data,               treatment = as.formula(scheme_form),               vcov = vcovG,               family = family2             )              # Compare the results             compare_means(robincar1, robincar2)           }         }       }     }   } }) ## Test passed 🎊"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/articles/robincar-validate.html","id":"linear-working-model","dir":"Articles","previous_headings":"Compare RobinCar2 to RobinCar results","what":"Linear Working Model","title":"RobinCar2 Validation Report","text":"response continuous.","code":"test_that(\"contrast -- standard options\", {   compare_contrast <- function(r1, r2) {     # Estimates and variance from RobinCar     enames <- r1$contrast$result$contrast     estimates1 <- r1$contrast$result$estimate     names(estimates1) <- NULL     variances1 <- r1$contrast$varcov     dimnames(variances1) <- NULL      # Estimates and variance for the first two     # contrast vector elements from RobinCar2     estimates2 <- r2$contrast$estimate     variances2 <- r2$contrast$variance     testthat::expect_equal(estimates1, estimates2)     testthat::expect_equal(variances1, variances2, tolerance = 1e-4)   }    for (scheme in c(\"simple\", \"pocock-simon\", \"permuted-block\")) {     model <- \"~ treatment + covar + s1\"     family <- family2 <- gaussian()     yname <- \"y\"     form <- as.formula(paste0(yname, model))     strata <- c(\"s1\")      if (scheme == \"simple\") {       scheme2 <- \"sp\"     } else if (scheme == \"permuted-block\") {       scheme2 <- \"pb\"     } else {       scheme2 <- \"ps\"     }      if (identical(strata, c())) {       strata2 <- \"1\"     } else {       strata2 <- strata     }      strata2c <- paste(strata2, collapse = \" + \")     scheme_form <- paste0(\"treatment ~ \", scheme2, \"(\", strata2c, \")\")      run_robin1 <- function(...) {       suppressWarnings(         robincar_glm(           df = glm_data,           treat_col = \"treatment\",           response_col = yname,           formula = form,           car_scheme = scheme,           car_strata_cols = strata,           g_family = family,           ...         )       )     }      run_robin2 <- function(...) {       robin_glm(         form = form,         data = glm_data,         treatment = as.formula(scheme_form),         vcov = vcovG,         family = family2,         pair = against_ref(c(\"pbo\", \"trt1\", \"trt2\"), ref = \"pbo\", x = c(\"trt1\", \"trt2\")),         ...       )     }      # DIFFERENCE ---------------------------------------------      r1_diff <- run_robin1(contrast_h = \"diff\")     r2_diff <- run_robin2(contrast = \"difference\")      compare_contrast(r1_diff, r2_diff)      # RATIO -------------------------------------------------      r1_ratio <- run_robin1(contrast_h = \"ratio\")     r2_ratio <- suppressWarnings(run_robin2(contrast = \"risk_ratio\"))      compare_contrast(r1_ratio, r2_ratio)      # ODDS RATIO --------------------------------------------      # RobinCar does not do all pairwise contrasts     r1_odds <- run_robin1(       contrast_h = function(vec) {         ((vec / (1 - vec)) / (vec[1] / (1 - vec[1])))[2:3]       }     )     r2_odds <- suppressWarnings(run_robin2(contrast = \"odds_ratio\"))     compare_contrast(r1_odds, r2_odds)      # CUSTOM FUNCTION ---------------------------------------      # This is a custom function for a contrast just to make sure     # the custom function works correctly, not for anything scientifically meaningful     r1_cust <- run_robin1(       contrast_h = function(x) x[-1] + 4     )     r2_cust <- run_robin2(       contrast = function(x, y) x + 4     )     compare_contrast(r1_cust, r2_cust)   } }) ## Test passed 🥳"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Liming Li. Author, maintainer. Marlena Bannick. Author. Daniel Sabanes Bove. Author. Dong Xi. Author. Ting Ye. Author. Yanyao Yi. Author. Gregory Chen. Contributor. Gilead Sciences, Inc.. Copyright holder, funder. F. Hoffmann-La Roche AG. Copyright holder, funder. Merck Sharp & Dohme, Inc.. Copyright holder, funder. AstraZeneca plc. Copyright holder, funder. Eli Lilly Company. Copyright holder, funder. University Washington. Copyright holder, funder.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li L, Bannick M, Sabanes Bove D, Xi D, Ye T, Yi Y (2025). RobinCar2: ROBust INference Covariate Adjustment Randomized Clinical Trials. R package version 0.2.0, https://github.com/openpharma/RobinCar2/.","code":"@Manual{,   title = {RobinCar2: ROBust INference for Covariate Adjustment in Randomized Clinical Trials},   author = {Liming Li and Marlena Bannick and Daniel {Sabanes Bove} and Dong Xi and Ting Ye and Yanyao Yi},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/openpharma/RobinCar2/}, }"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/index.html","id":"robincar2","dir":"","previous_headings":"","what":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"RobinCar2 package provides robust covariate adjustment methods estimating inferring treatment effects stratified randomization. implemented methods follow FDA’s final guidance covariate adjustment supported well-established body literature. linear adjustment, see, example, Tsiatis (2008), Bugni et al. (2018), Ye, Shao, Yi, Zhao (2023), Ye, Shao, Yi (2022). nonlinear adjustment, see, e.g., Rosenblum van der Laan (2010), Wang et al. (2021), Ye, Bannick, Yi, Shao (2023), Bannick, Shao, Liu, Du, Yi, Ye (2024). following papers (added ) cited FDA guidance. Bugni, F, IA Canay, Shaikh, 2018, Inference Covariate-Adaptive Randomization, Journal American Statistical Association, 113(524):1784-1796. Tsiatis, AA, M Davidian, M Zhang, X Lu, 2008, Covariate Adjustment Two-Sample Treatment Comparisons Randomized Trials: Principled Yet Flexible Approach, Statistics Medicine, 27(23):4658-4677. Wang, B, R Susukida, R Mojtabai, M Amin-Esmaeili, M Rosemblum, 2021. Model-Robust Inference Clinical Trials Improve Precision Stratified Randomization Covariate Adjustment, Journal American Statistical Association, doi: 10.1080/01621459.2021.1981338. Rosenblum, M MJ van der Laan, 2010, Simple, Efficient Estimators Treatment Effects Randomized Trials Using Generalized Linear Models Leverage Baseline Variables, International Journal Biostatistics, 6(1):13.","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/index.html","id":"development","dir":"","previous_headings":"Installation","what":"Development","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"can install current development version github :","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") }  remotes::install_github(   \"openpharma/RobinCar2\" )"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/index.html","id":"citing-robincar2","dir":"","previous_headings":"","what":"Citing RobinCar2","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"cite RobinCar2 please see .","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"package supported ASA-BIOP Covariate Adjustment SWG Software Subteam.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/RobinCar2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"RobinCar2 Package — RobinCar2-package","title":"RobinCar2 Package — RobinCar2-package","text":"RobinCar2 implements unbiased prediction robust inference variance fit R.","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/RobinCar2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RobinCar2 Package — RobinCar2-package","text":"Maintainer: Liming Li liming.li1@astrazeneca.com (ORCID) Authors: Marlena Bannick mnorwood@uw.edu (ORCID) Daniel Sabanes Bove daniel@rconis.com (ORCID) Dong Xi Dong.Xi1@gilead.com Ting Ye tingye1@uw.edu Yanyao Yi yi_yanyao@lilly.com contributors: Gregory Chen xiangyi.gregory.chen@msd.com [contributor] Gilead Sciences, Inc. [copyright holder, funder] F. Hoffmann-La Roche AG [copyright holder, funder] Merck Sharp & Dohme, Inc. [copyright holder, funder] AstraZeneca plc [copyright holder, funder] Eli Lilly Company [copyright holder, funder] University Washington [copyright holder, funder]","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction Bias — bias","title":"Prediction Bias — bias","text":"Obtain prediction bias within stratum.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction Bias — bias","text":"","code":"bias(residual, treatment, group_idx)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction Bias — bias","text":"residual (numeric) residuals. treatment (factor) treatment. group_idx (character) stratum index.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction Bias — bias","text":"Numeric matrix bias stratum.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/block_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Block Sum of a matrix — block_sum","title":"Block Sum of a matrix — block_sum","text":"Block Sum matrix","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/block_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block Sum of a matrix — block_sum","text":"","code":"block_sum(x, n)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/confint.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval — confint","title":"Confidence Interval — confint","text":"Obtain confidence interval marginal mean contrast.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/confint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval — confint","text":"","code":"# S3 method for class 'prediction_cf' confint(object, parm, level = 0.95, include_se = FALSE, ...)  # S3 method for class 'surv_effect' confint(object, parm, level = 0.95, transform, ...)  # S3 method for class 'treatment_effect' confint(object, parm, level = 0.95, transform, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/confint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval — confint","text":"object Object construct confidence interval. parm (character integer) Names parameters construct confidence interval. level (numeric) Confidence level. include_se (flag) Whether include standard error column result matrix. ... used. transform (function) Transform function.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/confint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval — confint","text":"matrix confidence interval.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/confint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval — confint","text":"","code":"robin_res <- robin_glm(   y_b ~ treatment * s1,   data = glm_data, treatment = treatment ~ s1, contrast = \"log_risk_ratio\" ) confint(robin_res$marginal_mean, level = 0.7) #>       Estimate      15 %      85 % #> pbo  0.3660066 0.3309087 0.4011045 #> trt1 0.5809844 0.5446811 0.6172876 #> trt2 0.6101537 0.5744255 0.6458818 confint(robin_res$contrast, parm = 1:3, level = 0.9) #> The confidence interval is transformed. #>                Estimate       5 %     95 % #> trt1 v.s. pbo  1.587360 1.3240911 1.902975 #> trt2 v.s. pbo  1.667056 1.3951516 1.991954 #> trt2 v.s. trt1 1.050207 0.9169573 1.202820"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Contrast Functions and Jacobians — h_diff","title":"Contrast Functions and Jacobians — h_diff","text":"Contrast Functions Jacobians Create Contrast Pairs","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contrast Functions and Jacobians — h_diff","text":"","code":"h_diff(x, y)  h_jac_diff(x, y)  h_risk_ratio(x, y)  h_jac_risk_ratio(x, y)  h_odds_ratio(x, y)  h_jac_odds_ratio(x, y)  h_log_risk_ratio(x, y)  h_jac_log_risk_ratio(x, y)  h_log_odds_ratio(x, y)  h_jac_log_odds_ratio(x, y)  eff_jacob(f)  pairwise(levels, x = levels)  against_ref(levels, ref = levels[1], x = tail(levels, -1))  custom_contrast(levels, x, y)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contrast Functions and Jacobians — h_diff","text":"x (vector) vector treatment levels. y (vector) vector treatment levels. f (function) Function argument x y compute treatment effect. levels (character) Levels treatment. ref (string int) Reference level.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contrast Functions and Jacobians — h_diff","text":"Vector contrasts, matrix jacobians. list contrast object following elements: Index treatment group. Index reference group. Additional attributes include levels max_levels indicating names treatment levels maximum number levels.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contrast Functions and Jacobians — h_diff","text":"","code":"h_diff(1:3, 4:6) #> [1] -3 -3 -3 h_jac_risk_ratio(1:3, 4:6) #>           [,1]        [,2] #> [1,] 0.2500000 -0.06250000 #> [2,] 0.2000000 -0.08000000 #> [3,] 0.1666667 -0.08333333"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/derived_outcome_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Outcome Values Based on Log Hazard Ratio — derived_outcome_vals","title":"Derive Outcome Values Based on Log Hazard Ratio — derived_outcome_vals","text":"Compute derived outcome values based given log hazard ratio.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/derived_outcome_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Outcome Values Based on Log Hazard Ratio — derived_outcome_vals","text":"","code":"h_derived_outcome_vals(   theta,   df,   treatment,   time,   status,   covariates,   n = nrow(df) )  h_strat_derived_outcome_vals(   theta,   df,   treatment,   time,   status,   strata,   covariates )"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/derived_outcome_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Outcome Values Based on Log Hazard Ratio — derived_outcome_vals","text":"theta (number) assumed log hazard ratio second vs. first level treatment arm variable. df (data.frame) data frame containing survival data. treatment (string) name treatment arm variable df. factor two levels, first level reference group. time (string) name time variable df, representing survival time. status (string) name status variable df, 0 censored 1 event. covariates (character) column names df used covariate adjustment. n (count) number observations. Note can higher number rows used stratified analyses computations. strata (string) name strata variable df, must factor.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/derived_outcome_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Outcome Values Based on Log Hazard Ratio — derived_outcome_vals","text":"data frame containing data input df, restructured standardized column names index, treatment, time, status, covariates, additional column O_hat containing derived outcome values. stratified version, list data frames returned, one stratum.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/derived_outcome_vals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Outcome Values Based on Log Hazard Ratio — derived_outcome_vals","text":"Please note covariates must include index, treatment, time, status avoid naming conflicts.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/derived_outcome_vals.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Derive Outcome Values Based on Log Hazard Ratio — derived_outcome_vals","text":"h_derived_outcome_vals(): calculates derived outcome values overall data set. h_strat_derived_outcome_vals(): calculates derived outcome values stratum separately.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/find_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Data in a Fit — find_data","title":"Find Data in a Fit — find_data","text":"Find Data Fit","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/find_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Data in a Fit — find_data","text":"","code":"find_data(fit, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/find_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Data in a Fit — find_data","text":"fit fit object. ... Additional arguments.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/find_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Data in a Fit — find_data","text":"data frame used fit.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_beta_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Coefficient Estimates from Linear Model Input — get_beta_estimates","title":"Calculate Coefficient Estimates from Linear Model Input — get_beta_estimates","text":"Calculate coefficient estimates treatment arm linear model input data.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_beta_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Coefficient Estimates from Linear Model Input — get_beta_estimates","text":"","code":"h_get_beta_estimates(lm_input)  h_get_strat_beta_estimates(strat_lm_input)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_beta_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Coefficient Estimates from Linear Model Input — get_beta_estimates","text":"lm_input (list) list containing linear model input data treatment arm, returned h_get_lm_input(). strat_lm_input (list) list lists, one stratum, containing linear model input data treatment arm, returned h_get_strat_lm_input().","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_beta_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Coefficient Estimates from Linear Model Input — get_beta_estimates","text":"list containing coefficient estimates treatment arm.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_beta_estimates.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate Coefficient Estimates from Linear Model Input — get_beta_estimates","text":"h_get_beta_estimates(): Calculate coefficient estimates overall data set. h_get_strat_beta_estimates(): Calculate coefficient estimates using stratified input.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_lm_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Linear Model Input Data — get_lm_input","title":"Get Linear Model Input Data — get_lm_input","text":"Prepare input data linear model based provided data frame model formula.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_lm_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Linear Model Input Data — get_lm_input","text":"","code":"h_get_lm_input(df, model)  h_get_strat_lm_input(df_split, model)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_lm_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Linear Model Input Data — get_lm_input","text":"df (data.frame) Including covariates needed model, well derived outcome O_hat treatment factor. model (formula) right-hand side model formula. df_split (list) list data frames, one stratum, returned h_strat_derived_outcome_vals().","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_lm_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Linear Model Input Data — get_lm_input","text":"list containing element treatment factor list corresponding model matrix X response vector y. stratified version, list lists returned, one stratum.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/get_lm_input.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get Linear Model Input Data — get_lm_input","text":"h_get_lm_input(): Get linear model input data overall data set. h_get_strat_lm_input(): Get linear model input data stratum separately.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/glm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Trial Data for GLMs with Permute-Block Randomization — glm_data","title":"Example Trial Data for GLMs with Permute-Block Randomization — glm_data","text":"dataset contains trial example data GLMs permute block randomization.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/glm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Trial Data for GLMs with Permute-Block Randomization — glm_data","text":"","code":"glm_data"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/glm_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Trial Data for GLMs with Permute-Block Randomization — glm_data","text":"data frame 600 rows 7 columns: id ID patients. treatment treatment assignment, \"pbo\", \"trt1\" \"trt2\" s1 first stratification variable, \"\" \"b\". s2 second stratification variable, \"c\" \"d\". covar covariate following normal distribution. y continuous response. y_b binary response.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/glm_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Trial Data for GLMs with Permute-Block Randomization — glm_data","text":"data generated create_glm_data.R script.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_adjust_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"Obtain Adjustment Proportion Treatment Assignment","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_adjust_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"","code":"h_adjust_pi(pi)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_adjust_pi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"pi (numeric) vector proportions.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_adjust_pi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"Numeric matrix.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_confint.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence interval calculations which are common across effect results. — h_confint","title":"Confidence interval calculations which are common across effect results. — h_confint","text":"Confidence interval calculations common across effect results.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_confint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence interval calculations which are common across effect results. — h_confint","text":"","code":"h_confint(x, parm, level = 0.95, transform, include_se = FALSE, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_events_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Events Table — h_events_table","title":"Prepare Events Table — h_events_table","text":"function creates data frame summarizing number patients events treatment arm stratification factor.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_events_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Events Table — h_events_table","text":"","code":"h_events_table(data, vars)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_events_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Events Table — h_events_table","text":"data (data.frame) data frame containing survival data. vars (list) list containing treatment, time, status, strata variables.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_events_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Events Table — h_events_table","text":"data frame columns treatment, strata, number patients, number events.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_erb.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Adjustment for Covariance Matrix — h_get_erb","title":"Obtain Adjustment for Covariance Matrix — h_get_erb","text":"Obtain Adjustment Covariance Matrix","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_erb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Adjustment for Covariance Matrix — h_get_erb","text":"","code":"h_get_erb(resi, group_idx, trt, pi, randomization)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_erb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Adjustment for Covariance Matrix — h_get_erb","text":"resi (numeric) vector residuals. group_idx (list integer) index groups. trt (factor) treatment assignment. pi (numeric) proportion treatment assignment. randomization (string) name randomization schema.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variable Names — h_get_vars","title":"Extract Variable Names — h_get_vars","text":"Extract Variable Names","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variable Names — h_get_vars","text":"","code":"h_get_vars(treatment)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variable Names — h_get_vars","text":"treatment (string formula) string name treatment, formula.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variable Names — h_get_vars","text":"list three elements, treatment, schema strata.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_get_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Variable Names — h_get_vars","text":"Extract formula elements, including treatment, schema strata.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate if Interaction Exists — h_interaction","title":"Evaluate if Interaction Exists — h_interaction","text":"Evaluate Interaction Exists","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate if Interaction Exists — h_interaction","text":"","code":"h_interaction(formula, treatment)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate if Interaction Exists — h_interaction","text":"formula (formula) formula model fitting. treatment (formula) formula treatment assignment.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_coef_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Hazard Ratio Coefficient Matrix — h_log_hr_coef_mat","title":"Log Hazard Ratio Coefficient Matrix — h_log_hr_coef_mat","text":"function creates coefficient matrix log hazard ratio estimates.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_coef_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Hazard Ratio Coefficient Matrix — h_log_hr_coef_mat","text":"","code":"h_log_hr_coef_mat(x)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_coef_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Hazard Ratio Coefficient Matrix — h_log_hr_coef_mat","text":"x (list) list containing log hazard ratio estimates standard errors.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_coef_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Hazard Ratio Coefficient Matrix — h_log_hr_coef_mat","text":"matrix columns log hazard ratio estimate, standard error, z-value, p-value.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_est_via_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Log Hazard Ratio via Score Function — h_log_hr_est_via_score","title":"Estimate Log Hazard Ratio via Score Function — h_log_hr_est_via_score","text":"function estimates log hazard ratio finding root log-rank score function.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_est_via_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Log Hazard Ratio via Score Function — h_log_hr_est_via_score","text":"","code":"h_log_hr_est_via_score(score_fun, interval = c(-5, 5), ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_est_via_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Log Hazard Ratio via Score Function — h_log_hr_est_via_score","text":"score_fun (function) log-rank score function used estimation. interval (numeric) numeric vector length 2 specifying interval search root. ... Additional arguments passed score_fun.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_est_via_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Log Hazard Ratio via Score Function — h_log_hr_est_via_score","text":"list containing: theta: estimated log hazard ratio. se: standard error estimated log hazard ratio. sigma_L2: variance log-rank statistic. n: number observations used calculation.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_log_hr_est_via_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Log Hazard Ratio via Score Function — h_log_hr_est_via_score","text":"deactivates ties factor correction score function passing use_ties_factor = FALSE score_fun.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_lr_test_via_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Rank Test via Score Function — h_lr_test_via_score","title":"Log-Rank Test via Score Function — h_lr_test_via_score","text":"function performs log-rank test using score function.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_lr_test_via_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Rank Test via Score Function — h_lr_test_via_score","text":"","code":"h_lr_test_via_score(score_fun, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_lr_test_via_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Rank Test via Score Function — h_lr_test_via_score","text":"score_fun (function) log-rank score function used testing. ... Additional arguments passed score_fun.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_lr_test_via_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Rank Test via Score Function — h_lr_test_via_score","text":"list containing: u_l: log-rank score statistic. sigma_l2: variance log-rank statistic. tau_l: log-rank test statistic. pval: two-sided p-value log-rank test. n: number observations used calculation.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_lr_test_via_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Rank Test via Score Function — h_lr_test_via_score","text":"activates ties factor correction score function passing use_ties_factor = TRUE score_fun.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_n_events_per_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Number of Events per Unique Event Time — h_n_events_per_time","title":"Count Number of Events per Unique Event Time — h_n_events_per_time","text":"function counts number events unique event time point survival dataset.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_n_events_per_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Number of Events per Unique Event Time — h_n_events_per_time","text":"","code":"h_n_events_per_time(df, time, status)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_n_events_per_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Number of Events per Unique Event Time — h_n_events_per_time","text":"df (data.frame) containing survival data. time (string) name time variable. status (string) name status variable, 1 indicates event 0 indicates censoring.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_n_events_per_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Number of Events per Unique Event Time — h_n_events_per_time","text":"data.frame two columns: time n_events, n_events number events time point.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_n_events_per_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Number of Events per Unique Event Time — h_n_events_per_time","text":"events dataset, returns empty data.frame.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_prep_survival_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Survival Input — h_prep_survival_input","title":"Prepare Survival Input — h_prep_survival_input","text":"Prepare Survival Input","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_prep_survival_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Survival Input — h_prep_survival_input","text":"","code":"h_prep_survival_input(formula, data, treatment)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_prep_survival_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Survival Input — h_prep_survival_input","text":"formula (formula) left hand side form Surv(time, status) right hand side defining optional covariates just 1 covariates. data (data.frame) containing variables formula. treatment (string formula) string name treatment, formula.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_prep_survival_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Survival Input — h_prep_survival_input","text":"list containing following elements: data: potentially updated data set. time: Name time variable. status: Name status variable. treatment: Name treatment variable. strata: Name strata variable. schema: Randomization schema. covariates: Names covariates model. model: formula including covariates, treatment strata variables. n_levels: Number treatment levels. levels: Names treatment levels.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_prep_survival_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Survival Input — h_prep_survival_input","text":"Note formula can also contain externally defined survival::Surv object. case, time status variables extracted added data input. Note user ensure case column binding correct, .e., rows data match rows Surv object. addition, named variables must appear data Surv object, avoid ambiguity (difference vs. behavior survival::coxph() better transparency).","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_test_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Rank Test Results Matrix — h_test_mat","title":"Log-Rank Test Results Matrix — h_test_mat","text":"function creates matrix summarizing results log-rank test.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_test_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Rank Test Results Matrix — h_test_mat","text":"","code":"h_test_mat(x)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_test_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Rank Test Results Matrix — h_test_mat","text":"x (list) list containing log-rank test results.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/h_test_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Rank Test Results Matrix — h_test_mat","text":"matrix columns test statistic p-value.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/jac_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the Jacobian matrix — jac_mat","title":"Obtain the Jacobian matrix — jac_mat","text":"Obtain Jacobian matrix","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/jac_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the Jacobian matrix — jac_mat","text":"","code":"jac_mat(jac, pair)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/predict_counterfactual.html","id":null,"dir":"Reference","previous_headings":"","what":"Counterfactual Prediction — predict_counterfactual","title":"Counterfactual Prediction — predict_counterfactual","text":"Obtain counterfactual prediction fit.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/predict_counterfactual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counterfactual Prediction — predict_counterfactual","text":"","code":"predict_counterfactual(fit, treatment, data, vcov, vcov_args, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/predict_counterfactual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counterfactual Prediction — predict_counterfactual","text":"fit fitted object. treatment (formula) formula form treatment ~ strata(s). data (data.frame) raw dataset. vcov (function character) variance function name. vcov_args (list) additional arguments variance function. ... Additional arguments methods.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/predict_counterfactual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counterfactual Prediction — predict_counterfactual","text":"List class prediction_cf containing following elements: estimate: predicted marginal mean. residual: residual bias-corrected prediction. predictions: predicted values. predictions_liner: linear predictions. schema: randomization schema. response: response value. fit: fitted model. model_matrix: model matrix. treatment_formula: treatment assignment randomization formula. treatment: treatment value. group_idx: group index based stratification. variance: estimated variance marginal mean. variance_name: name variance.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/prediction_cf_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Methods for prediction_cf — prediction_cf_methods","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"S3 Methods prediction_cf","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/prediction_cf_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"","code":"# S3 method for class 'prediction_cf' print(x, level = 0.95, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/prediction_cf_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"x (prediction_cf) obtained counter-factual prediction object. level (number) significance level.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/prediction_cf_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"return value.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/prediction_cf_methods.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"print(prediction_cf): prints prediction_cf object.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/randomization_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomization schema — randomization_schema","title":"Randomization schema — randomization_schema","text":"Randomization schema","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/randomization_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomization schema — randomization_schema","text":"","code":"randomization_schema"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/randomization_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Randomization schema — randomization_schema","text":"object class data.frame 3 rows 2 columns.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate adjusted glm model — robin_glm","title":"Covariate adjusted glm model — robin_glm","text":"Covariate adjusted glm model","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate adjusted glm model — robin_glm","text":"","code":"robin_glm(   formula,   data,   treatment,   contrast = c(\"difference\", \"risk_ratio\", \"odds_ratio\", \"log_risk_ratio\",     \"log_odds_ratio\"),   contrast_jac = NULL,   vcov = \"vcovG\",   family = gaussian(),   vcov_args = list(),   pair,   ... )"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate adjusted glm model — robin_glm","text":"formula (formula) formula analysis. data (data.frame) Input data frame. treatment (formula character(1)) formula treatment assignment assignment stratification, string name treatment assignment. contrast (function character(1)) function calculate treatment effect, character \"difference\", \"risk_ratio\", \"odds_ratio\" default contrasts. contrast_jac (function) function calculate Jacobian contrast function. Ignored using default contrasts. vcov (function) function calculate variance-covariance matrix treatment effect, including vcovHC vcovG. family (family) family object glm model. vcov_args (list) Additional arguments passed vcov. pair Pairwise treatment comparison. ... Additional arguments passed glm glm.nb.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate adjusted glm model — robin_glm","text":"robin_output object, marginal_mean contrast components.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_glm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Covariate adjusted glm model — robin_glm","text":"family MASS::negative.binomial(NA), function use MASS::glm.nb instead glm.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariate adjusted glm model — robin_glm","text":"","code":"robin_glm(   y ~ treatment * s1,   data = glm_data,   treatment = treatment ~ s1, contrast = \"difference\" ) #> Model        :  y ~ treatment * s1  #> Randomization:  treatment ~ s1  ( Simple ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.223048 0.068366 0.089054 0.3570 #> trt1 0.763992 0.077178 0.612727 0.9153 #> trt2 0.948275 0.077437 0.796502 1.1000 #>  #> Contrast     :  difference #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.54094 0.10282  5.2611 1.432e-07 *** #> trt2 v.s. pbo   0.72523 0.10302  7.0399 1.924e-12 *** #> trt2 v.s. trt1  0.18428 0.10911  1.6890   0.09123 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate adjusted lm model — robin_lm","title":"Covariate adjusted lm model — robin_lm","text":"Covariate adjusted lm model","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate adjusted lm model — robin_lm","text":"","code":"robin_lm(   formula,   data,   treatment,   vcov = \"vcovG\",   vcov_args = list(),   pair,   ... )"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate adjusted lm model — robin_lm","text":"formula (formula) formula analysis. data (data.frame) Input data frame. treatment (formula character(1)) formula treatment assignment assignment stratification, string name treatment assignment. vcov (function) function calculate variance-covariance matrix treatment effect, including vcovHC vcovG. default 'vcovG'. vcov_args (list) Additional arguments passed vcov. pair Pairwise treatment comparison. ... Additional arguments passed lm.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate adjusted lm model — robin_lm","text":"robin_output object, marginal_mean contrast components.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariate adjusted lm model — robin_lm","text":"","code":"robin_lm(   y ~ treatment * s1,   data = glm_data,   treatment = treatment ~ s1 ) #> Model        :  y ~ treatment * s1  #> Randomization:  treatment ~ s1  ( Simple ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.223048 0.068366 0.089054 0.3570 #> trt1 0.763992 0.077178 0.612727 0.9153 #> trt2 0.948275 0.077437 0.796502 1.1000 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.54094 0.10282  5.2611 1.432e-07 *** #> trt2 v.s. pbo   0.72523 0.10302  7.0399 1.924e-12 *** #> trt2 v.s. trt1  0.18428 0.10911  1.6890   0.09123 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate Adjusted and Stratified Survival Analysis — robin_surv","title":"Covariate Adjusted and Stratified Survival Analysis — robin_surv","text":"Calculate log-rank test well hazard ratio estimates survival data, optionally adjusted covariates stratification factor.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate Adjusted and Stratified Survival Analysis — robin_surv","text":"","code":"robin_surv(   formula,   data,   treatment,   comparisons,   contrast = \"hazardratio\",   test = \"logrank\",   ... )"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate Adjusted and Stratified Survival Analysis — robin_surv","text":"formula (formula) formula analysis, form Surv(time, status) ~ covariates. (covariates adjusted , use 1 instead right hand side.) data (data.frame) Input data frame. treatment (formula) formula treatment assignment assignment stratification. comparisons (list) optional list comparisons treatment levels performed, see details. default, pairwise comparisons performed automatically. contrast (character(1)) contrast statistic used, currently \"hazardratio\" supported. test (character(1)) test used, currently \"logrank\" supported. ... Additional arguments passed survival analysis functions, particular hr_se_plugin_adjusted (please see details).","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate Adjusted and Stratified Survival Analysis — robin_surv","text":"surv_effect object containing results survival analysis.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Covariate Adjusted and Stratified Survival Analysis — robin_surv","text":"user can optionally specify list comparisons treatment levels performed. list must two elements: Treatment level indices treatment group. Treatment level indices control group. example like compare level 3 level 1, also level 3 level 2 (level 2 level 1) can specify: comparisons = list(c(3, 3), c(1, 2))","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariate Adjusted and Stratified Survival Analysis — robin_surv","text":"","code":"# Adjusted for covariates meal.cal and age and adjusted for stratification by sex: robin_surv(   formula = Surv(time, status) ~ meal.cal + age,   data = surv_data,   treatment = sex ~ strata ) #> Model        :  Surv(time, status) ~ meal.cal + age  #> Randomization:  sex ~ strata  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)    #> Male v.s. Female  0.55219 0.19133  2.8861   0.0039 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     2.9496 0.003181 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # Adjusted for stratification by strata but not for covariates: robin_surv(   formula = Surv(time, status) ~ 1,   data = surv_data,   treatment = sex ~ strata ) #> Model        :  Surv(time, status) ~ 1  #> Randomization:  sex ~ strata  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)    #> Male v.s. Female  0.55482 0.17063  3.2516 0.001147 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     3.2856 0.001018 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # Unadjusted for covariates and stratification: robin_surv(   formula = Surv(time, status) ~ 1,   data = surv_data,   treatment = sex ~ 1 ) #> Model        :  Surv(time, status) ~ 1  #> Randomization:  sex ~ 1  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)    #> Male v.s. Female  0.53343 0.16727   3.189 0.001428 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     3.2135 0.001311 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Hazard Ratio Estimation and Log-Rank Test via Score Function — robin_surv_comparison","title":"Log Hazard Ratio Estimation and Log-Rank Test via Score Function — robin_surv_comparison","text":"function combines estimation log hazard ratio log-rank test using score function. two treatment arms compared data subset accordingly.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Hazard Ratio Estimation and Log-Rank Test via Score Function — robin_surv_comparison","text":"","code":"robin_surv_comparison(   score_fun,   vars,   data,   exp_level,   control_level,   unadj_score_fun = NULL,   ... )"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Hazard Ratio Estimation and Log-Rank Test via Score Function — robin_surv_comparison","text":"score_fun (function) log-rank score function used estimation testing. vars (list) list containing levels, treatment, covariates. data (data.frame) data frame containing survival data. exp_level (count) Level experimental treatment arm. control_level (count) Level control treatment arm. unadj_score_fun (function NULL) Optional unadjusted score function, see details. ... Additional arguments passed score_fun.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Hazard Ratio Estimation and Log-Rank Test via Score Function — robin_surv_comparison","text":"list containing: estimate: estimated log hazard ratio. se: standard error estimated log hazard ratio. hr_n: number observations used estimation. hr_sigma_l2: variance log-rank statistic used estimation. test_stat: log-rank test statistic. p_value: two-sided p-value log-rank test. test_score: log-rank score statistic. test_n: number observations used log-rank test. test_sigma_l2: variance log-rank statistic used log-rank test.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/robin_surv_comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log Hazard Ratio Estimation and Log-Rank Test via Score Function — robin_surv_comparison","text":"unadjusted score function provided unadj_score_fun, used estimate log hazard ratio first. unadjusted log hazard ratio estimate passed adjusted score function score_fun theta_hat. required score function adjusted covariates.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/sum_vectors_in_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum vectors in a list — sum_vectors_in_list","title":"Sum vectors in a list — sum_vectors_in_list","text":"Sum vectors list","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/sum_vectors_in_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum vectors in a list — sum_vectors_in_list","text":"","code":"sum_vectors_in_list(lst)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival Example Data — surv_data","title":"Survival Example Data — surv_data","text":"dataset contains survival data survival package's survival::lung dataset, modified include factors sex strata, well binary status variable 1 death 0 censored.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Example Data — surv_data","text":"","code":"surv_data"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Survival Example Data — surv_data","text":"object class data.frame 228 rows 12 columns.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Survival Example Data — surv_data","text":"data generated create_surv_data.R script.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_effect_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Methods for surv_effect — surv_effect_methods","title":"S3 Methods for surv_effect — surv_effect_methods","text":"S3 Methods surv_effect","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_effect_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Methods for surv_effect — surv_effect_methods","text":"","code":"# S3 method for class 'surv_effect' print(x, ...)  table(x, ...)  # Default S3 method table(x, ...)  # S3 method for class 'surv_effect' table(x, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_effect_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Methods for surv_effect — surv_effect_methods","text":"x (surv_effect) obtained result robin_surv(). ... ignored additional arguments (compatibility).","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_effect_methods.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"S3 Methods for surv_effect — surv_effect_methods","text":"print(surv_effect): prints surv_effect object. table(surv_effect): prints returns invisibly events table surv_effect object.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/surv_effect_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Methods for surv_effect — surv_effect_methods","text":"","code":"x <- robin_surv(   formula = Surv(time, status) ~ meal.cal + age,   data = surv_data,   treatment = sex ~ strata ) print(x) #> Model        :  Surv(time, status) ~ meal.cal + age  #> Randomization:  sex ~ strata  ( Simple ) #>  #> Contrast     :  Log Hazard ratio #>  #>                  Estimate Std.Err Z Value Pr(>|z|)    #> Male v.s. Female  0.55219 0.19133  2.8861   0.0039 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Test         :  Log-Rank #>  #>                  Test Stat. Pr(>|z|)    #> Male v.s. Female     2.9496 0.003181 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 table(x) #> Number of patients and events per stratum and treatment arm: #>   strata    sex Patients Events #> 1      0 Female       20      6 #> 2      0   Male       30     24 #> 3      1 Female       29     21 #> 4      1   Male       57     43 #> 5      2 Female       18     14 #> 6      2   Male       25     24 #> 7      3   Male        1      1"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_comparison_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival Comparison Functions — survival_comparison_functions","title":"Survival Comparison Functions — survival_comparison_functions","text":"simple wrappers around robin_surv_comparison() called corresponding log-rank score functions.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_comparison_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Comparison Functions — survival_comparison_functions","text":"","code":"robin_surv_no_strata_no_cov(vars, data, exp_level, control_level)  robin_surv_strata(vars, data, exp_level, control_level)  robin_surv_cov(vars, data, exp_level, control_level, ...)  robin_surv_strata_cov(vars, data, exp_level, control_level, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_comparison_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Comparison Functions — survival_comparison_functions","text":"vars (list) list containing levels, treatment, covariates. data (data.frame) data frame containing survival data. exp_level (count) Level experimental treatment arm. control_level (count) Level control treatment arm. ... Additional arguments passed score_fun.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_comparison_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival Comparison Functions — survival_comparison_functions","text":"See robin_surv_comparison().","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_comparison_functions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Survival Comparison Functions — survival_comparison_functions","text":"robin_surv_no_strata_no_cov(): without strata without covariates, based h_lr_score_no_strata_no_cov(). robin_surv_strata(): without strata without covariates, based h_lr_score_strat(). robin_surv_cov(): without strata without covariates, based h_lr_score_cov() h_lr_score_no_strata_no_cov() (used find unadjusted log hazard ratio estimate). robin_surv_strata_cov(): strata covariates, based h_lr_score_strat_cov() h_lr_score_strat() (used find unadjusted log hazard ratio estimate).","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_score_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Rank Score Functions for Survival Analysis — survival_score_functions","title":"Log-Rank Score Functions for Survival Analysis — survival_score_functions","text":"functions compute log-rank score statistics survival analysis. Depending function, stratified /adjusted covariates.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_score_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Rank Score Functions for Survival Analysis — survival_score_functions","text":"","code":"h_lr_score_no_strata_no_cov(   theta,   df,   treatment,   time,   status,   n = nrow(df),   use_ties_factor = TRUE )  h_lr_score_strat(   theta,   df,   treatment,   time,   status,   strata,   use_ties_factor = TRUE )  h_lr_score_cov(   theta,   df,   treatment,   time,   status,   model,   theta_hat = theta,   use_ties_factor = TRUE,   hr_se_plugin_adjusted = TRUE )  h_lr_score_strat_cov(   theta,   df,   treatment,   time,   status,   strata,   model,   theta_hat = theta,   use_ties_factor = TRUE,   hr_se_plugin_adjusted = TRUE )"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_score_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Rank Score Functions for Survival Analysis — survival_score_functions","text":"theta (number) assumed log hazard ratio second vs. first level treatment arm variable. df (data.frame) data frame containing survival data. treatment (string) name treatment arm variable df. factor two levels, first level reference group. time (string) name time variable df, representing survival time. status (string) name status variable df, 0 censored 1 event. n (count) number observations. Note can higher number rows used stratified analyses computations. use_ties_factor (flag) Whether use ties factor variance calculation. used calculating score test statistic, estimating log hazard ratio. strata (string) name strata variable df, must factor. model (formula) model formula covariate adjustment, e.g., ~ cov1 + cov2. theta_hat (number) estimated log hazard ratio adjusting covariates. hr_se_plugin_adjusted (flag) Defines method calculating standard error log hazard ratio estimate adjusting covariates, see details.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_score_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Rank Score Functions for Survival Analysis — survival_score_functions","text":"score function value(s), following attributes: sigma_l2: variance log-rank statistic. se_theta_l: corresponding standard error term log hazard ratio. n: number observations used calculation.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_score_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Rank Score Functions for Survival Analysis — survival_score_functions","text":"hr_se_plugin_adjusted flag relevant standard error covariate adjusted log hazard ratio estimate: TRUE, adjusted hazard ratio estimate plugged variance formula, per original publication. hand, FALSE, unadjusted estimate used instead.  explained detail vignette \"Survival Analysis RobinCar2\" Section \"Covariate adjusted analysis without strata\". Note covariate adjusted score functions, also work numeric theta vector length > 1.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/survival_score_functions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Log-Rank Score Functions for Survival Analysis — survival_score_functions","text":"h_lr_score_no_strata_no_cov(): without strata covariates. h_lr_score_strat(): strata without covariates. h_lr_score_cov(): covariates without strata. h_lr_score_strat_cov(): strata covariates.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/treatment_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Treatment Effect — treatment_effect","title":"Treatment Effect — treatment_effect","text":"Obtain treatment effect variance counter-factual prediction","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/treatment_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treatment Effect — treatment_effect","text":"","code":"treatment_effect(   object,   pair = pairwise(names(object$estimate)),   eff_measure,   eff_jacobian = eff_jacob(eff_measure),   contrast_name,   ... )  difference(object, ...)  risk_ratio(object, ...)  odds_ratio(object, ...)  log_risk_ratio(object, ...)  log_odds_ratio(object, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/treatment_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treatment Effect — treatment_effect","text":"object Object obtain treatment effect. pair (contrast) Contrast choices. eff_measure (function) Treatment effect measurement function. eff_jacobian (function) Treatment effect jacobian function. contrast_name (string) Name contrast. ... Additional arguments variance.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/treatment_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treatment Effect — treatment_effect","text":"list treatment_effect object following elements: estimate: estimate treatment effect. pair: contrast object indicating pairwise treatment effect. contrast: name contrast function. euqal_val: value treatment effect given contrast. variance: variance treatment effect. jacobian: Jacobian matrix. contrast_mat: contrast summary matrix.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/update_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Update levels in a contrast pair — update_levels","title":"Update levels in a contrast pair — update_levels","text":"Update levels contrast pair","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/update_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update levels in a contrast pair — update_levels","text":"","code":"update_levels(pair, levels)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovG.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Covariance (ANHECOVA) — vcovG","title":"Generalized Covariance (ANHECOVA) — vcovG","text":"Generalized Covariance (ANHECOVA)","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Covariance (ANHECOVA) — vcovG","text":"","code":"vcovG(x, decompose = TRUE, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Covariance (ANHECOVA) — vcovG","text":"x (prediction_cf) Counter-factual prediction. decompose (flag) whether use decompose method calculate variance. ... used.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Covariance (ANHECOVA) — vcovG","text":"Named covariance matrix.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovHC.html","id":null,"dir":"Reference","previous_headings":"","what":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"heteroskedasticity-consistent covariance matrix predictions obtained sandwich::vocvHC using sandwich method.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovHC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"","code":"vcovHC(x, type = \"HC3\", ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovHC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"x (prediction_cf) Counter-factual prediction. type (character) Type HC covariance matrix. ... Additional arguments sandwich::vcovHC.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/reference/vcovHC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"Matrix heteroskedasticity-consistent covariance predictions.","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"RobinCar2 0.2.0","text":"Add survival analysis log-rank test hazard ratio estimation. Add log_odds_ratio log_risk_ratio function inference. Add contrast_mat treatment_effect object. Add confint obtain confidence interval prediction_cf treatment_effect object.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/news/index.html","id":"bug-fix-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"RobinCar2 0.2.0","text":"Previously robin_glm, vcovG always used regardless variance type argument. fixed now.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/news/index.html","id":"misc-0-2-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"RobinCar2 0.2.0","text":"Reorganized output structure robin_glm robin_lm.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/news/index.html","id":"robincar2-011","dir":"Changelog","previous_headings":"","what":"RobinCar2 0.1.1","title":"RobinCar2 0.1.1","text":"CRAN release: 2025-04-03","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.2.0-rc2/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"RobinCar2 0.1.1","text":"Add unbiased counter-factual prediction. Add robust sandwich variance marginal treatment effect.","code":""}]
