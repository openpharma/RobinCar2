[{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/intro.html","id":"common-usage","dir":"Articles","previous_headings":"","what":"Common Usage","title":"Package Introduction","text":"minimal call robin_lm() robin_glm(), consisting formula, data arguments randomization scheme, produce object class treatment_effect.","code":"library(RobinCar2) head(dummy_data) #>   id treatment s1 s2      covar           y y_b #> 1  1       pbo  b  c  0.5119022 -0.02761963   0 #> 2  2       pbo  a  c -0.7941720  0.49919508   0 #> 3  3      trt1  b  d  0.8988804  0.48037375   0 #> 4  4      trt2  b  c -0.4821317  0.67490126   1 #> 5  5      trt1  a  d -0.2285514  0.55499267   0 #> 6  6      trt2  a  c  0.2742069  2.39830584   1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/intro.html","id":"data-introduction","dir":"Articles","previous_headings":"Common Usage","what":"Data Introduction","title":"Package Introduction","text":"dummy_data, following columns: id patient identifier. treatment treatment assignment. s1 first stratification factor. s2 second stratification factor. covar continuous covariate. y continuous outcome. y_b binary outcome.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/intro.html","id":"obtain-treatment-effect-for-continuous-outcomes-using-the-general-variance","dir":"Articles","previous_headings":"Common Usage","what":"Obtain Treatment Effect for Continuous Outcomes Using the General Variance","title":"Package Introduction","text":"continuous outcome y, linear model includes covar covariate, s1 stratification factor. randomization scheme permuted-block randomization stratified s1. model formula also includes treatment stratification interaction y ~ treatment * s1 + covar. can also use Huber-White variance estimator setting vcov = \"vcovHC\". Please note case, model formula contain treatment stratification (covariate) interaction. Note robin_glm can also handle continuous outcomes using default family default link function family = gaussian().","code":"robin_lm(y ~ treatment * s1 + covar,   data = dummy_data,   treatment = treatment ~ pb(s1) ) #> Model        :  y ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.200321 0.067690 0.067651 0.3330 #> trt1 0.763971 0.075929 0.615152 0.9128 #> trt2 0.971250 0.076543 0.821228 1.1213 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.56365 0.10074  5.5952 2.203e-08 *** #> trt2 v.s. pbo   0.77093 0.10133  7.6082 2.779e-14 *** #> trt2 v.s. trt1  0.20728 0.10683  1.9402   0.05235 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 robin_lm(y ~ treatment + s1 + covar,   data = dummy_data,   treatment = treatment ~ pb(s1),   vcov = \"vcovHC\" ) #> Model        :  y ~ treatment + s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.200449 0.067690 0.067779 0.3331 #> trt1 0.763978 0.075930 0.615158 0.9128 #> trt2 0.971285 0.076539 0.821271 1.1213 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.56353 0.10074  5.5941 2.218e-08 *** #> trt2 v.s. pbo   0.77084 0.10133  7.6074 2.796e-14 *** #> trt2 v.s. trt1  0.20731 0.10683  1.9405   0.05232 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/intro.html","id":"obtain-treatment-effect-for-binary-outcomes","dir":"Articles","previous_headings":"Common Usage","what":"Obtain Treatment Effect for Binary Outcomes","title":"Package Introduction","text":"binary outcomes, logistic model includes covar covariate, s1 stratification factor. randomization scheme permuted-block randomization stratified s1. model formula also includes treatment stratification interaction y_b ~ treatment * s1 + covar. Note need specify family binomial(link = \"logit\").","code":"robin_glm(y_b ~ treatment * s1 + covar,   data = dummy_data,   treatment = treatment ~ pb(s1),   family = binomial(link = \"logit\") ) #> Model        :  y_b ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.356097 0.033599 0.290243 0.4219 #> trt1 0.580696 0.034418 0.513238 0.6482 #> trt2 0.621386 0.034019 0.554711 0.6881 #>  #> Contrast     :  h_diff #>                Estimate  Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo  0.224599 0.047711  4.7075 2.508e-06 *** #> trt2 v.s. pbo  0.265290 0.047534  5.5810 2.391e-08 *** #> trt2 v.s. trt1 0.040691 0.047941  0.8488     0.396     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/intro.html","id":"obtain-treatment-effect-for-counts","dir":"Articles","previous_headings":"Common Usage","what":"Obtain Treatment Effect for Counts","title":"Package Introduction","text":"counts, log link model includes covar covariate, s1 stratification factor. randomization scheme permuted-block randomization stratified s1. model formula also includes treatment stratification interaction y_count ~ treatment * s1 + covar. Note need specify family poisson(link = \"log\") use Poisson model MASS::negative.binomial(theta = NA) use negative binomial model. fixed theta provided known.","code":"dummy_data$y_count <- rpois(nrow(dummy_data), lambda = 20) robin_glm(   y_count ~ treatment * s1 + covar,   data = dummy_data,   treatment = treatment ~ pb(s1),   family = MASS::negative.binomial(theta = 1) ) #> Model        :  y_count ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  19.15272  0.30047 18.56381 19.742 #> trt1 20.06258  0.33673 19.40260 20.723 #> trt2 20.59901  0.32085 19.97016 21.228 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.90986 0.45255  2.0105 0.0443766 *   #> trt2 v.s. pbo   1.44629 0.43915  3.2934 0.0009898 *** #> trt2 v.s. trt1  0.53643 0.46552  1.1523 0.2491880     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/intro.html","id":"using-different-covariate-adaptive-randomization-schema","dir":"Articles","previous_headings":"Common Usage","what":"Using Different Covariate-Adaptive Randomization Schema","title":"Package Introduction","text":"randomization schema permuted-block randomization, can use randomization schema. Currently RobinCar2 supports sp simple randomization, pb permuted-block randomization, ps Pocock-Simon randomization.","code":"robin_glm(y_b ~ treatment * s1 + covar,   data = dummy_data,   treatment = treatment ~ ps(s1),   family = binomial(link = \"logit\") ) #> Model        :  y_b ~ treatment * s1 + covar  #> Randomization:  treatment ~ ps(s1)  ( Pocock-Simon ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.356097 0.033599 0.290243 0.4219 #> trt1 0.580696 0.034418 0.513238 0.6482 #> trt2 0.621386 0.034019 0.554711 0.6881 #>  #> Contrast     :  h_diff #>                Estimate  Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo  0.224599 0.047711  4.7075 2.508e-06 *** #> trt2 v.s. pbo  0.265290 0.047534  5.5810 2.391e-08 *** #> trt2 v.s. trt1 0.040691 0.047941  0.8488     0.396     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-comparison.html","id":"robincar2-and-robincar-produce-the-same-results-when-run-with-the-same-settings-on-the-same-data","dir":"Articles","previous_headings":"","what":"RobinCar2 and RobinCar produce the same results when run with the same settings on the same data","title":"User Guide to RobinCar and RobinCar2","text":"RobinCar2 testing suite ensures outputs identical RobinCar RobinCar2. comparisons use dummy_data dataset included RobinCar2. outputs point estimates variance estimates compared variety settings, including: Marginal means treatment contrasts, difference, relative risk, odds ratio, custom contrast. Gaussian, binomial, Poisson, negative binomial (known unknown dispersion parameters) working models. Mean model specifications ANOVA, ANCOVA, ANHECOVA three covariates. simple, Pocock-Simon, permuted block randomization schemes. Please see following testing file details: https://github.com/openpharma/RobinCar2/blob/main/tests/testthat/test-validate-robin_glm.R view report RobinCar2 Validation Report.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-comparison.html","id":"differences-between-robincar-and-robincar2-argument-usage","dir":"Articles","previous_headings":"","what":"Differences between RobinCar and RobinCar2 argument usage","title":"User Guide to RobinCar and RobinCar2","text":"interface users similar RobinCar RobinCar2, though RobinCar2 streamlined use. Users RobinCar find RobinCar2 least user-friendly trouble switching packages. provide example using logistic regression working model stratified permuted block randomization, dummy_data provided package. output treatment contrast.","code":"head(dummy_data)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-comparison.html","id":"robincar","dir":"Articles","previous_headings":"Differences between RobinCar and RobinCar2 argument usage","what":"RobinCar","title":"User Guide to RobinCar and RobinCar2","text":"call RobinCar, output:","code":"robincar_glm(   df = dummy_data,   treat_col = \"treatment\",   response_col = \"y_b\",   formula = y_b ~ treatment * s1 + covar,   car_strata_cols = \"s1\",   car_scheme = \"permuted-block\",   g_family = binomial(link = \"logit\"),   contrast_h = \"diff\" ) #> $main #> Treatment group mean estimates from a GLM working model of family binomial and link logit using formula:  #> response ~ treat * s1 + covar #>  #>  #> Used HC0-type of heteroskedasticity-consistent variance estimates  #> and adjusted variance-covariance matrix for randomization car_strata s1  #> consistent with the permuted-block design. #>  #> Estimates: #> # A tibble: 3 × 4 #>   treat estimate     se `pval (2-sided)` #>   <chr>    <dbl>  <dbl>            <dbl> #> 1 pbo      0.356 0.0336         3.03e-26 #> 2 trt1     0.581 0.0344         7.25e-64 #> 3 trt2     0.621 0.0340         1.54e-74 #>  #> Variance-Covariance Matrix: #>              [,1]         [,2]         [,3] #> pbo  1.128902e-03 1.856234e-05 1.333885e-05 #> trt1 1.856234e-05 1.184599e-03 2.178112e-05 #> trt2 1.333885e-05 2.178112e-05 1.157268e-03 #>  #> $contrast #> Treatment group contrasts using linear contrast #>  #> Contrasts: #> # A tibble: 2 × 4 #>   contrast         estimate     se `pval (2-sided)` #>   <chr>               <dbl>  <dbl>            <dbl> #> 1 treat trt1 - pbo    0.225 0.0477     0.00000251   #> 2 treat trt2 - pbo    0.265 0.0475     0.0000000239 #>  #> Variance-Covariance Matrix for Contrasts: #>             [,1]        [,2] #> [1,] 0.002276376 0.001118782 #> [2,] 0.001118782 0.002259492"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-comparison.html","id":"robincar2","dir":"Articles","previous_headings":"Differences between RobinCar and RobinCar2 argument usage","what":"RobinCar2","title":"User Guide to RobinCar and RobinCar2","text":"RobinCar2, randomization information, including name treatment variable, stratification variable, randomization scheme info included treatment argument. contrasts RobinCar, information required treat_col, car_strata_cols, car_scheme. structure output RobinCar2 closely mirrors structure output one obtain using glm().","code":"robin_glm(   data = dummy_data,   formula = y_b ~ treatment * s1 + covar,   treatment = treatment ~ pb(s1),   family = binomial(link = \"logit\") ) #> Model        :  y_b ~ treatment * s1 + covar  #> Randomization:  treatment ~ pb(s1)  ( Permuted-Block ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.356097 0.033599 0.290243 0.4219 #> trt1 0.580696 0.034418 0.513238 0.6482 #> trt2 0.621386 0.034019 0.554711 0.6881 #>  #> Contrast     :  h_diff #>                Estimate  Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo  0.224599 0.047711  4.7075 2.508e-06 *** #> trt2 v.s. pbo  0.265290 0.047534  5.5810 2.391e-08 *** #> trt2 v.s. trt1 0.040691 0.047941  0.8488     0.396     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-comparison.html","id":"feature-availability-in-robincar-v--robincar2","dir":"Articles","previous_headings":"","what":"Feature availability in RobinCar v. RobinCar2","title":"User Guide to RobinCar and RobinCar2","text":"list differences features available RobinCar RobinCar2. continually updated packages updated. Last Updated: February 21, 2025","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-comparison.html","id":"variance-function","dir":"Articles","previous_headings":"Feature availability in RobinCar v. RobinCar2 > Features available in RobinCar2 that are not available in RobinCar","what":"Variance function","title":"User Guide to RobinCar and RobinCar2","text":"RobinCar one option variance, RobinCar2 calls vcovG. vcovG influence function-based variance estimator. RobinCar2 option specifying vcov vcovG. Currently, vcov allowed RobinCar2 sandwich variance, called vcovHC valid ANCOVA linear contrast. Please see table following blogpost ASA-BIOP Covariate Adjustment SWG information methodology behind sandwich variance versus influence-based variance.","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-comparison.html","id":"time-to-event-analysis","dir":"Articles","previous_headings":"Feature availability in RobinCar v. RobinCar2 > Features available in RobinCar that are not available in RobinCar2","what":"Time-to-event analysis","title":"User Guide to RobinCar and RobinCar2","text":"Currently, RobinCar functions time--event data analysis RobinCar2 . planned future releases RobinCar2. Please see usage RobinCar time--event methods.","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-validate.html","id":"negative-binomial-working-model","dir":"Articles","previous_headings":"Compare RobinCar2 to RobinCar results","what":"Negative Binomial Working Model","title":"RobinCar2 Validation Report","text":"response following negative binomial distribution dispersion parameter 1. checks marginal means variance.","code":"# Make categorical outcome to test counts # Not informative at all dummy_data$y_c <- MASS::rnegbin(n = nrow(dummy_data), theta = 1)  test_that(\"marginal means\", {   # Function to compare RobinCar to RobinCar2 outputs   compare_means <- function(r1, r2) {     # Estimates and variance from RobinCar     enames <- r1$result$treat     estimates1 <- r1$result$estimate     names(estimates1) <- enames     variances1 <- r1$varcov     colnames(variances1) <- enames     rownames(variances1) <- enames      # Estimates and variance for the first two     # contrast vector elements from RobinCar2     mm <- r2$marginal_mean     estimates2 <- mm$estimate     variances2 <- mm$variance      testthat::expect_equal(estimates1, estimates2)     testthat::expect_equal(variances1, variances2)   }    families <- list(     gaussian(),     binomial(),     poisson(),     negative.binomial(theta = 1),     \"nb\"   ) # negative binomial with unspecified dispersion parameter    for (family in families) {     for (model in c(       # ANOVA       \"~ treatment\",       # ANCOVA       \"~ treatment + covar\",       \"~ treatment + covar + s1\",       \"~ treatment + covar + s1 + s2\",       # ANHECOVA       \"~ treatment * (covar)\",       \"~ treatment * (covar + s1)\",       \"~ treatment * (covar + s1 + s2)\"     )) {       for (scheme in c(\"simple\", \"pocock-simon\", \"permuted-block\")) {         for (strata in list(c(), c(\"s1\"), c(\"s1\", \"s2\"))) {           # Set formula based on parameters           if (identical(family, \"nb\")) {             yname <- \"y_c\"           } else if (identical(family$family, \"gaussian\")) {             yname <- \"y\"           } else if (identical(family$family, \"binomial\")) {             yname <- \"y_b\"           } else {             yname <- \"y_c\"           }            form <- as.formula(paste0(yname, model))            if (identical(family, \"nb\")) {             family2 <- MASS::negative.binomial(theta = NA)           } else {             family2 <- family           }            if (scheme == \"simple\") {             scheme2 <- \"sp\"           } else if (scheme == \"permuted-block\") {             scheme2 <- \"pb\"           } else {             scheme2 <- \"ps\"           }            if (identical(strata, c())) {             strata2 <- \"1\"           } else {             strata2 <- strata           }            strata2c <- paste(strata2, collapse = \" + \")           scheme_form <- paste0(\"treatment ~ \", scheme2, \"(\", strata2c, \")\")            # Skip simple randomization with strata           # this is fine for RobinCar2, but it returns an error           # (intentionally) with RobinCar           if (!(identical(strata, c()) & (scheme != \"simple\"))) {             # Use RobinCar             # We don't need to see RobinCar warnings.             set.seed(365)             suppressWarnings(               robincar1 <- robincar_glm(                 df = dummy_data,                 treat_col = \"treatment\",                 response_col = yname,                 formula = form,                 car_scheme = scheme,                 car_strata_cols = strata,                 g_family = family               )             )              # Use RobinCar2             set.seed(365)             robincar2 <- robin_glm(               form = form,               data = dummy_data,               treatment = as.formula(scheme_form),               vcov = vcovG,               family = family2             )              # Compare the results             compare_means(robincar1, robincar2)           }         }       }     }   } }) ## Test passed 🎊"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/articles/robincar-validate.html","id":"linear-working-model","dir":"Articles","previous_headings":"Compare RobinCar2 to RobinCar results","what":"Linear Working Model","title":"RobinCar2 Validation Report","text":"response continuous.","code":"test_that(\"contrast -- standard options\", {   compare_contrast <- function(r1, r2) {     # Estimates and variance from RobinCar     enames <- r1$contrast$result$contrast     estimates1 <- r1$contrast$result$estimate     names(estimates1) <- NULL     variances1 <- r1$contrast$varcov     dimnames(variances1) <- NULL      # Estimates and variance for the first two     # contrast vector elements from RobinCar2     estimates2 <- r2$estimate     variances2 <- r2$variance     testthat::expect_equal(estimates1, estimates2)     testthat::expect_equal(variances1, variances2, tolerance = 1e-4)   }    for (scheme in c(\"simple\", \"pocock-simon\", \"permuted-block\")) {     model <- \"~ treatment + covar + s1\"     family <- family2 <- gaussian()     yname <- \"y\"     form <- as.formula(paste0(yname, model))     strata <- c(\"s1\")      if (scheme == \"simple\") {       scheme2 <- \"sp\"     } else if (scheme == \"permuted-block\") {       scheme2 <- \"pb\"     } else {       scheme2 <- \"ps\"     }      if (identical(strata, c())) {       strata2 <- \"1\"     } else {       strata2 <- strata     }      strata2c <- paste(strata2, collapse = \" + \")     scheme_form <- paste0(\"treatment ~ \", scheme2, \"(\", strata2c, \")\")      run_robin1 <- function(...) {       suppressWarnings(         robincar_glm(           df = dummy_data,           treat_col = \"treatment\",           response_col = yname,           formula = form,           car_scheme = scheme,           car_strata_cols = strata,           g_family = family,           ...         )       )     }      run_robin2 <- function(...) {       robin_glm(         form = form,         data = dummy_data,         treatment = as.formula(scheme_form),         vcov = vcovG,         family = family2,         pair = against_ref(c(\"pbo\", \"trt1\", \"trt2\"), ref = \"pbo\", x = c(\"trt1\", \"trt2\")),         ...       )     }      # DIFFERENCE ---------------------------------------------      r1_diff <- run_robin1(contrast_h = \"diff\")     r2_diff <- run_robin2(contrast = \"difference\")      compare_contrast(r1_diff, r2_diff)      # RATIO -------------------------------------------------      r1_ratio <- run_robin1(contrast_h = \"ratio\")     r2_ratio <- run_robin2(contrast = \"risk_ratio\")      compare_contrast(r1_ratio, r2_ratio)      # ODDS RATIO --------------------------------------------      # RobinCar does not do all pairwise contrasts     r1_odds <- run_robin1(       contrast_h = function(vec) {         ((vec / (1 - vec)) / (vec[1] / (1 - vec[1])))[2:3]       }     )     r2_odds <- run_robin2(contrast = \"odds_ratio\")     compare_contrast(r1_odds, r2_odds)      # CUSTOM FUNCTION ---------------------------------------      # This is a custom function for a contrast just to make sure     # the custom function works correctly, not for anything scientifically meaningful     r1_cust <- run_robin1(       contrast_h = function(x) x[-1] + 4     )     r2_cust <- run_robin2(       contrast = function(x, y) x + 4     )     compare_contrast(r1_cust, r2_cust)   } }) ## Test passed 🥳"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Liming Li. Author, maintainer. Marlena Bannick. Author. Dong Xi. Author. Ting Ye. Author. Yanyao Yi. Author. Gregory Chen. Contributor. Gilead Sciences, Inc.. Copyright holder, funder. F. Hoffmann-La Roche AG. Copyright holder, funder. Merck Sharp & Dohme, Inc.. Copyright holder, funder. AstraZeneca plc. Copyright holder, funder. Eli Lilly Company. Copyright holder, funder. University Washington. Copyright holder, funder.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li L, Bannick M, Xi D, Ye T, Yi Y (2025). RobinCar2: ROBust INference Covariate Adjustment Randomized Clinical Trials. R package version 0.1.1, https://github.com/openpharma/RobinCar2/.","code":"@Manual{,   title = {RobinCar2: ROBust INference for Covariate Adjustment in Randomized Clinical Trials},   author = {Liming Li and Marlena Bannick and Dong Xi and Ting Ye and Yanyao Yi},   year = {2025},   note = {R package version 0.1.1},   url = {https://github.com/openpharma/RobinCar2/}, }"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/index.html","id":"robincar2","dir":"","previous_headings":"","what":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"RobinCar2 package provides robust covariate adjustment methods estimating inferring treatment effects stratified randomization. implemented methods follow FDA’s final guidance covariate adjustment supported well-established body literature. linear adjustment, see, example, Tsiatis (2008), Bugni et al. (2018), Ye, Shao, Yi, Zhao (2023), Ye, Shao, Yi (2022). nonlinear adjustment, see, e.g., Rosenblum van der Laan (2010), Wang et al. (2021), Ye, Bannick, Yi, Shao (2023), Bannick, Shao, Liu, Du, Yi, Ye (2024). following papers (added ) cited FDA guidance. Bugni, F, IA Canay, Shaikh, 2018, Inference Covariate-Adaptive Randomization, Journal American Statistical Association, 113(524):1784-1796. Tsiatis, AA, M Davidian, M Zhang, X Lu, 2008, Covariate Adjustment Two-Sample Treatment Comparisons Randomized Trials: Principled Yet Flexible Approach, Statistics Medicine, 27(23):4658-4677. Wang, B, R Susukida, R Mojtabai, M Amin-Esmaeili, M Rosemblum, 2021. Model-Robust Inference Clinical Trials Improve Precision Stratified Randomization Covariate Adjustment, Journal American Statistical Association, doi: 10.1080/01621459.2021.1981338. Rosenblum, M MJ van der Laan, 2010, Simple, Efficient Estimators Treatment Effects Randomized Trials Using Generalized Linear Models Leverage Baseline Variables, International Journal Biostatistics, 6(1):13.","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/index.html","id":"development","dir":"","previous_headings":"Installation","what":"Development","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"can install current development version github :","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") }  remotes::install_github(   \"openpharma/RobinCar2\" )"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/index.html","id":"citing-robincar2","dir":"","previous_headings":"","what":"Citing RobinCar2","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"cite RobinCar2 please see .","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"ROBust INference for Covariate Adjustment in Randomized Clinical Trials","text":"package supported ASA-BIOP Covariate Adjustment SWG Software Subteam.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/RobinCar2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"RobinCar2 Package — RobinCar2-package","title":"RobinCar2 Package — RobinCar2-package","text":"RobinCar2 implements unbiased prediction robust inference variance fit R.","code":""},{"path":[]},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/RobinCar2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RobinCar2 Package — RobinCar2-package","text":"Maintainer: Liming Li liming.li1@astrazeneca.com (ORCID) Authors: Marlena Bannick mnorwood@uw.edu (ORCID) Dong Xi Dong.Xi1@gilead.com Ting Ye tingye1@uw.edu Yanyao Yi yi_yanyao@lilly.com contributors: Gregory Chen xiangyi.gregory.chen@msd.com [contributor] Gilead Sciences, Inc. [copyright holder, funder] F. Hoffmann-La Roche AG [copyright holder, funder] Merck Sharp & Dohme, Inc. [copyright holder, funder] AstraZeneca plc [copyright holder, funder] Eli Lilly Company [copyright holder, funder] University Washington [copyright holder, funder]","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction Bias — bias","title":"Prediction Bias — bias","text":"Obtain prediction bias within stratum.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction Bias — bias","text":"","code":"bias(residual, treatment, group_idx)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction Bias — bias","text":"residual (numeric) residuals. treatment (factor) treatment. group_idx (character) stratum index.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction Bias — bias","text":"Numeric matrix bias stratum.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/block_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Block Sum of a matrix — block_sum","title":"Block Sum of a matrix — block_sum","text":"Block Sum matrix","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/block_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block Sum of a matrix — block_sum","text":"","code":"block_sum(x, n)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Contrast Functions and Jacobians — h_diff","title":"Contrast Functions and Jacobians — h_diff","text":"Contrast Functions Jacobians Create Contrast Pairs","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contrast Functions and Jacobians — h_diff","text":"","code":"h_diff(x, y)  h_jac_diff(x, y)  h_ratio(x, y)  h_jac_ratio(x, y)  h_odds_ratio(x, y)  h_jac_odds_ratio(x, y)  eff_jacob(f)  pairwise(levels, x = levels)  against_ref(levels, ref = levels[1], x = tail(levels, -1))  custom_contrast(levels, x, y)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contrast Functions and Jacobians — h_diff","text":"x (vector) vector treatment levels. y (vector) vector treatment levels. f (function) Function argument x y compute treatment effect. levels (character) Levels treatment. ref (string int) Reference level.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contrast Functions and Jacobians — h_diff","text":"Vector contrasts, matrix jacobians. list contrast object following elements: Index treatment group. Index reference group. Additional attributes include levels max_levels indicating names treatment levels maximum number levels.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contrast Functions and Jacobians — h_diff","text":"","code":"h_diff(1:3, 4:6) #> [1] -3 -3 -3 h_jac_ratio(1:3, 4:6) #>           [,1]        [,2] #> [1,] 0.2500000 -0.06250000 #> [2,] 0.2000000 -0.08000000 #> [3,] 0.1666667 -0.08333333"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/dummy_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy Trial Data with Permute-Block Randomization — dummy_data","title":"Dummy Trial Data with Permute-Block Randomization — dummy_data","text":"dataset contains dummy trial data permute block randomization.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/dummy_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy Trial Data with Permute-Block Randomization — dummy_data","text":"","code":"dummy_data"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/dummy_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dummy Trial Data with Permute-Block Randomization — dummy_data","text":"data frame 600 rows 7 columns: id ID patients. treatment treatment assignment, \"pbo\", \"trt1\" \"trt2\" s1 first stratification variable, \"\" \"b\". s2 second stratification variable, \"c\" \"d\". covar covariate following normal distribution. y continuous response. y_b binary response.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/dummy_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dummy Trial Data with Permute-Block Randomization — dummy_data","text":"data generated create_dummy.R script.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/find_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Data in a Fit — find_data","title":"Find Data in a Fit — find_data","text":"Find Data Fit","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/find_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Data in a Fit — find_data","text":"","code":"find_data(fit, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/find_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Data in a Fit — find_data","text":"fit fit object. ... Additional arguments.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/find_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Data in a Fit — find_data","text":"data frame used fit.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_adjust_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"Obtain Adjustment Proportion Treatment Assignment","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_adjust_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"","code":"h_adjust_pi(pi)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_adjust_pi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"pi (numeric) vector proportions.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_adjust_pi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Adjustment for Proportion of Treatment Assignment — h_adjust_pi","text":"Numeric matrix.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_erb.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Adjustment for Covariance Matrix — h_get_erb","title":"Obtain Adjustment for Covariance Matrix — h_get_erb","text":"Obtain Adjustment Covariance Matrix","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_erb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Adjustment for Covariance Matrix — h_get_erb","text":"","code":"h_get_erb(resi, group_idx, trt, pi, randomization)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_erb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Adjustment for Covariance Matrix — h_get_erb","text":"resi (numeric) vector residuals. group_idx (list integer) index groups. trt (factor) treatment assignment. pi (numeric) proportion treatment assignment. randomization (string) name randomization schema.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variable Names — h_get_vars","title":"Extract Variable Names — h_get_vars","text":"Extract Variable Names","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variable Names — h_get_vars","text":"","code":"h_get_vars(treatment)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variable Names — h_get_vars","text":"treatment (string formula) string name treatment, formula.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variable Names — h_get_vars","text":"list three elements, treatment, schema strata.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/h_get_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Variable Names — h_get_vars","text":"Extract formula elements, including treatment, schema strata.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/jac_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the Jacobian matrix — jac_mat","title":"Obtain the Jacobian matrix — jac_mat","text":"Obtain Jacobian matrix","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/jac_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the Jacobian matrix — jac_mat","text":"","code":"jac_mat(jac, pair)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/predict_counterfactual.html","id":null,"dir":"Reference","previous_headings":"","what":"Counterfactual Prediction — predict_counterfactual","title":"Counterfactual Prediction — predict_counterfactual","text":"Obtain counterfactual prediction fit.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/predict_counterfactual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counterfactual Prediction — predict_counterfactual","text":"","code":"predict_counterfactual(fit, treatment, data, vcov, vcov_args, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/predict_counterfactual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counterfactual Prediction — predict_counterfactual","text":"fit fitted object. treatment (formula) formula form treatment ~ strata(s). data (data.frame) raw dataset. vcov (function character) variance function name. vcov_args (list) additional arguments variance function. ... Additional arguments methods.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/predict_counterfactual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counterfactual Prediction — predict_counterfactual","text":"List class prediction_cf containing following elements: estimate: predicted marginal mean. residual: residual bias-corrected prediction. predictions: predicted values. predictions_liner: linear predictions. schema: randomization schema. response: response value. fit: fitted model. model_matrix: model matrix. treatment_formula: treatment assignment randomization formula. treatment: treatment value. group_idx: group index based stratification. variance: estimated variance marginal mean. variance_name: name variance.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/prediction_cf_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Methods for prediction_cf — prediction_cf_methods","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"S3 Methods prediction_cf","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/prediction_cf_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"","code":"# S3 method for class 'prediction_cf' print(x, level = 0.95, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/prediction_cf_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"x (prediction_cf) obtained counter-factual prediction object. level (number) significance level.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/prediction_cf_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"return value.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/prediction_cf_methods.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"S3 Methods for prediction_cf — prediction_cf_methods","text":"print(prediction_cf): prints prediction_cf object.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/randomization_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomization schema — randomization_schema","title":"Randomization schema — randomization_schema","text":"Randomization schema","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/randomization_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomization schema — randomization_schema","text":"","code":"randomization_schema"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/randomization_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Randomization schema — randomization_schema","text":"object class data.frame 3 rows 2 columns.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate adjusted glm model — robin_glm","title":"Covariate adjusted glm model — robin_glm","text":"Covariate adjusted glm model","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate adjusted glm model — robin_glm","text":"","code":"robin_glm(   formula,   data,   treatment,   contrast = \"difference\",   contrast_jac = NULL,   vcov = \"vcovG\",   family = gaussian(),   vcov_args = list(),   pair,   ... )"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate adjusted glm model — robin_glm","text":"formula (formula) formula analysis. data (data.frame) Input data frame. treatment (formula character(1)) formula treatment assignment assignment stratification, string name treatment assignment. contrast (function character(1)) function calculate treatment effect, character \"difference\", \"risk_ratio\", \"odds_ratio\" default contrasts. contrast_jac (function) function calculate Jacobian contrast function. Ignored using default contrasts. vcov (function) function calculate variance-covariance matrix treatment effect, including vcovHC vcovG. family (family) family object glm model. vcov_args (list) Additional arguments passed vcov. pair Pairwise treatment comparison. ... Additional arguments passed glm glm.nb.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate adjusted glm model — robin_glm","text":"treatment_effect object.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_glm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Covariate adjusted glm model — robin_glm","text":"family MASS::negative.binomial(NA), function use MASS::glm.nb instead glm.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariate adjusted glm model — robin_glm","text":"","code":"robin_glm(   y ~ treatment * s1,   data = dummy_data,   treatment = treatment ~ s1, contrast = \"difference\" ) #> Model        :  y ~ treatment * s1  #> Randomization:  treatment ~ s1  ( Simple ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.223048 0.068366 0.089054 0.3570 #> trt1 0.763992 0.077178 0.612727 0.9153 #> trt2 0.948275 0.077437 0.796502 1.1000 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.54094 0.10282  5.2611 1.432e-07 *** #> trt2 v.s. pbo   0.72523 0.10302  7.0399 1.924e-12 *** #> trt2 v.s. trt1  0.18428 0.10911  1.6890   0.09123 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate adjusted lm model — robin_lm","title":"Covariate adjusted lm model — robin_lm","text":"Covariate adjusted lm model","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate adjusted lm model — robin_lm","text":"","code":"robin_lm(   formula,   data,   treatment,   vcov = \"vcovG\",   vcov_args = list(),   pair,   ... )"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate adjusted lm model — robin_lm","text":"formula (formula) formula analysis. data (data.frame) Input data frame. treatment (formula character(1)) formula treatment assignment assignment stratification, string name treatment assignment. vcov (function) function calculate variance-covariance matrix treatment effect, including vcovHC vcovG. default 'vcovG'. vcov_args (list) Additional arguments passed vcov. pair Pairwise treatment comparison. ... Additional arguments passed lm.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate adjusted lm model — robin_lm","text":"treatment_effect object.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/robin_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariate adjusted lm model — robin_lm","text":"","code":"robin_lm(   y ~ treatment * s1,   data = dummy_data,   treatment = treatment ~ s1 ) #> Model        :  y ~ treatment * s1  #> Randomization:  treatment ~ s1  ( Simple ) #> Variance Type:  vcovG  #> Marginal Mean:  #>      Estimate  Std.Err    2.5 % 97.5 % #> pbo  0.223048 0.068366 0.089054 0.3570 #> trt1 0.763992 0.077178 0.612727 0.9153 #> trt2 0.948275 0.077437 0.796502 1.1000 #>  #> Contrast     :  h_diff #>                Estimate Std.Err Z Value  Pr(>|z|)     #> trt1 v.s. pbo   0.54094 0.10282  5.2611 1.432e-07 *** #> trt2 v.s. pbo   0.72523 0.10302  7.0399 1.924e-12 *** #> trt2 v.s. trt1  0.18428 0.10911  1.6890   0.09123 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/treatment_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Treatment Effect — treatment_effect","title":"Treatment Effect — treatment_effect","text":"Obtain treatment effect variance counter-factual prediction","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/treatment_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treatment Effect — treatment_effect","text":"","code":"treatment_effect(   object,   pair = pairwise(names(object$estimate)),   eff_measure,   eff_jacobian = eff_jacob(eff_measure),   ... )  difference(object, ...)  risk_ratio(object, ...)  odds_ratio(object, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/treatment_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treatment Effect — treatment_effect","text":"object Object obtain treatment effect. pair (contrast) Contrast choices. eff_measure (function) Treatment effect measurement function. eff_jacobian (function) Treatment effect jacobian function. ... Additional arguments variance.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/treatment_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treatment Effect — treatment_effect","text":"list treatment_effect object following elements: estimate: estimate treatment effect. pair: contrast object indicating pairwise treatment effect. contrast: name contrast function. euqal_val: value treatment effect given contrast. marginal_mean: prediction_cf object. fit: fitted model. treatment: treatment assignment. variance: variance treatment effect. jacobian: Jacobian matrix.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/update_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Update levels in a contrast pair — update_levels","title":"Update levels in a contrast pair — update_levels","text":"Update levels contrast pair","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/update_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update levels in a contrast pair — update_levels","text":"","code":"update_levels(pair, levels)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovG.html","id":null,"dir":"Reference","previous_headings":"","what":"ANHECOVA Covariance — vcovG","title":"ANHECOVA Covariance — vcovG","text":"ANHECOVA Covariance","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANHECOVA Covariance — vcovG","text":"","code":"vcovG(x, decompose = TRUE, ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ANHECOVA Covariance — vcovG","text":"x (prediction_cf) Counter-factual prediction. decompose (flag) whether use decompose method calculate variance. ... used.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ANHECOVA Covariance — vcovG","text":"Named covariance matrix.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovHC.html","id":null,"dir":"Reference","previous_headings":"","what":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"heteroskedasticity-consistent covariance matrix predictions obtained sandwich::vocvHC using sandwich method.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovHC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"","code":"vcovHC(x, type = \"HC3\", ...)"},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovHC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"x (prediction_cf) Counter-factual prediction. type (character) Type HC covariance matrix. ... Additional arguments sandwich::vcovHC.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/reference/vcovHC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heteroskedasticity-consistent covariance matrix for predictions — vcovHC","text":"Matrix heteroskedasticity-consistent covariance predictions.","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/news/index.html","id":"robincar2-011","dir":"Changelog","previous_headings":"","what":"RobinCar2 0.1.1","title":"RobinCar2 0.1.1","text":"CRAN release: 2025-04-03","code":""},{"path":"https://openpharma.github.io/RobinCar2/v0.1.1/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"RobinCar2 0.1.1","text":"Add unbiased counter-factual prediction. Add robust sandwich variance marginal treatment effect.","code":""}]
